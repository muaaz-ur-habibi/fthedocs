Using Internet Sockets
Brian Beej Jorgensen Hall
Using Internet Sockets
Brian Beej Jorgensen Hall
v3.1.12, Copyright  July 17, 2024
Hey! Socket programming got you down? Is this stuff just a little too difficult to figure out from the man pages? You want to do cool Internet programming, but you dont have time to wade through a gob of structs trying to figure out if you have to call bind() before you connect(), etc., etc.
Well, guess what! Ive already done this nasty business, and Im dying to share the information with everyone! Youve come to the right place. This document should give the average competent C programmer the edge s/he needs to get a grip on this networking noise.
And check it out: Ive finally caught up with the future (just in the nick of time, too!) and have updated the Guide for IPv6! Enjoy!
This document has been written as a tutorial, not a complete reference. It is probably at its best when read by individuals who are just starting out with socket programming and are looking for a foothold. It is certainly not the complete and total guide to sockets programming, by any means.
Hopefully, though, itll be just enough for those man pages to start making sense :-)
The code contained within this document was compiled on a Linux PC using Gnus gcc compiler. It should, however, build on just about any platform that uses gcc. Naturally, this doesnt apply if youre programming for Windowssee the section on Windows programming, below.
This official location of this document is:
There you will also find example code and translations of the guide into various languages.
To buy nicely bound print copies (some call them books), visit:
Ill appreciate the purchase because it helps sustain my document-writing lifestyle!
When compiling for Solaris or SunOS, you need to specify some extra command-line switches for linking in the proper libraries. In order to do this, simply add -lnsl -lsocket -lresolv to the end of the compile command, like so:
If you still get errors, you could try further adding a -lxnet to the end of that command line. I dont know what that does, exactly, but some people seem to need it.
Another place that you might find problems is in the call to setsockopt(). The prototype differs from that on my Linux box, so instead of:
enter this:
As I dont have a Sun box, I havent tested any of the above informationits just what people have told me through email.
At this point in the guide, historically, Ive done a bit of bagging on Windows, simply due to the fact that I dont like it very much. But I should really be fair and tell you that Windows has a huge install base and is obviously a perfectly fine operating system.
They say absence makes the heart grow fonder, and in this case, I believe it to be true. (Or maybe its age.) But what I can say is that after a decade-plus of not using Microsoft OSes for my personal work, Im much happier! As such, I can sit back and safely say, Sure, feel free to use Windows! OK yes, it does make me grit my teeth to say that.
So I still encourage you to try Linux1, BSD2, or some flavor of Unix, instead.
But people like what they like, and you Windows folk will be pleased to know that this information is generally applicable to you guys, with a few minor changes, if any.
Another thing that you should strongly consider is the Windows Subsystem for Linux3. This basically allows you to install a Linux VM-ish thing on Windows 10. That will also definitely get you situated, and youll be able to build and run these programs as is.
One cool thing you can do is install Cygwin4, which is a collection of Unix tools for Windows. Ive heard on the grapevine that doing so allows all these programs to compile unmodified, but Ive never tried it.
But some of you might want to do things the Pure Windows Way. Thats very gutsy of you, and this is what you have to do: run out and get Unix immediately! No, noIm kidding. Im supposed to be Windows-friendly(er) these days

This is what youll have to do: first, ignore pretty much all of the system header files I mention in here. Instead, include:
winsock2 is the new (circa 1994) version of the Windows socket library.
Unfortunately, if you include windows.h, it automatically pulls in the older winsock.h (version 1) header file which conflicts with winsock2.h! Fun times.
So if you have to include windows.h, you need to define a macro to get it to not include the older header:
Wait! You also have to make a call to WSAStartup() before doing anything else with the sockets library. You pass in the Winsock version you desire to this function (e.g.version 2.2). And then you can check the result to make sure that version is available.
The code to do that looks something like this:
Note that call to WSACleanup() in there. Thats what you want to call when youre done with the Winsock library.
You also have to tell your compiler to link in the Winsock library, called ws2_32.lib for Winsock 2. Under VC++, this can be done through the Project menu, under Settings.... Click the Link tab, and look for the box titled Object/library modules. Add ws2_32.lib (or whichever lib is your preference) to that list.
Or so I hear.
Once you do that, the rest of the examples in this tutorial should generally apply, with a few exceptions. For one thing, you cant use close() to close a socketyou need to use closesocket(), instead. Also, select() only works with socket descriptors, not file descriptors (like 0 for stdin).
There is also a socket class that you can use, CSocket Check your compilers help pages for more information.
To get more information about Winsock, check out the official page at Microsoft.
Finally, I hear that Windows has no fork() system call which is, unfortunately, used in some of my examples. Maybe you have to link in a POSIX library or something to get it to work, or you can use CreateProcess() instead. fork() takes no arguments, and CreateProcess() takes about 48 billion arguments. If youre not up to that, the CreateThread() is a little easier to digestunfortunately a discussion about multithreading is beyond the scope of this document. I can only talk about so much, you know!
Extra finally, Steven Mitchell has ported a number of the examples5 to Winsock. Check that stuff out.
Im generally available to help out with email questions so feel free to write in, but I cant guarantee a response. I lead a pretty busy life and there are times when I just cant answer a question you have. When thats the case, I usually just delete the message. Its nothing personal; I just wont ever have the time to give the detailed answer you require.
As a rule, the more complex the question, the less likely I am to respond. If you can narrow down your question before mailing it and be sure to include any pertinent information (like platform, compiler, error messages youre getting, and anything else you think might help me troubleshoot), youre much more likely to get a response. For more pointers, read ESRs document, How To Ask Questions The Smart Way6.
If you dont get a response, hack on it some more, try to find the answer, and if its still elusive, then write me again with the information youve found and hopefully it will be enough for me to help out.
Now that Ive badgered you about how to write and not write me, Id just like to let you know that I fully appreciate all the praise the guide has received over the years. Its a real morale boost, and it gladdens me to hear that it is being used for good! :-) Thank you!
 You are more than welcome to mirror this site, whether publicly or privately. If you publicly mirror the site and want me to link to it from the main page, drop me a line at beej@beej.us.
 If you want to translate the guide into another language, write me at beej@beej.us and Ill link to your translation from the main page. Feel free to add your name and contact info to the translation.
This source markdown document uses UTF-8 encoding.
Please note the license restrictions in the Copyright, Distribution, and Legal section, below.
If you want me to host the translation, just ask. Ill also link to it if you want to host it; either way is fine.
Beejs Guide to Network Programming is Copyright  2019 Brian Beej Jorgensen Hall.
With specific exceptions for source code and translations, below, this work is licensed under the Creative Commons Attribution- Noncommercial- No Derivative Works 3.0 License. To view a copy of this license, visit
https://creativecommons.org/licenses/by-nc-nd/3.0/
or send a letter to Creative Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.
One specific exception to the No Derivative Works portion of the license is as follows: this guide may be freely translated into any language, provided the translation is accurate, and the guide is reprinted in its entirety. The same license restrictions apply to the translation as to the original guide. The translation may also include the name and contact information for the translator.
The C source code presented in this document is hereby granted to the public domain, and is completely free of any license restriction.
Educators are freely encouraged to recommend or supply copies of this guide to their students.
Unless otherwise mutually agreed by the parties in writing, the author offers the work as-is and makes no representations or warranties of any kind concerning the work, express, implied, statutory or otherwise, including, without limitation, warranties of title, merchantability, fitness for a particular purpose, noninfringement, or the absence of latent or other defects, accuracy, or the presence of absence of errors, whether or not discoverable.
Except to the extent required by applicable law, in no event will the author be liable to you on any legal theory for any special, incidental, consequential, punitive or exemplary damages arising out of the use of the work, even if the author has been advised of the possibility of such damages.
Contact beej@beej.us for more information.
Thanks to everyone who has helped in the past and future with me getting this guide written. And thank you to all the people who produce the Free software and packages that I use to make the Guide: GNU, Linux, Slackware, vim, Python, Inkscape, pandoc, many others. And finally a big thank-you to the literally thousands of you who have written in with suggestions for improvements and words of encouragement.
I dedicate this guide to some of my biggest heroes and inpirators in the world of computers: Donald Knuth, Bruce Schneier, W. Richard Stevens, and The Woz, my Readership, and the entire Free and Open Source Software Community.
This book is written in Markdown using the vim editor on an Arch Linux box loaded with GNU tools. The cover art and diagrams are produced with Inkscape. The Markdown is converted to HTML and LaTex/PDF by Python, Pandoc and XeLaTeX, using Liberation fonts. The toolchain is composed of 100% Free and Open Source Software.
You hear talk of sockets all the time, and perhaps you are wondering just what they are exactly. Well, theyre this: a way to speak to other programs using standard Unix file descriptors.
What?
Okyou may have heard some Unix hacker state, Jeez, everything in Unix is a file! What that person may have been talking about is the fact that when Unix programs do any sort of I/O, they do it by reading or writing to a file descriptor. A file descriptor is simply an integer associated with an open file. But (and heres the catch), that file can be a network connection, a FIFO, a pipe, a terminal, a real on-the-disk file, or just about anything else. Everything in Unix is a file! So when you want to communicate with another program over the Internet youre gonna do it through a file descriptor, youd better believe it.
Where do I get this file descriptor for network communication, Mr. Smarty-Pants? is probably the last question on your mind right now, but Im going to answer it anyway: You make a call to the socket() system routine. It returns the socket descriptor, and you communicate through it using the specialized send() and recv() (man send, man recv) socket calls.
But, hey! you might be exclaiming right about now. If its a file descriptor, why in the name of Neptune cant I just use the normal read() and write() calls to communicate through the socket? The short answer is, You can! The longer answer is, You can, but send() and recv() offer much greater control over your data transmission.
What next? How about this: there are all kinds of sockets. There are DARPA Internet addresses (Internet Sockets), path names on a local node (Unix Sockets), CCITT X.25 addresses (X.25 Sockets that you can safely ignore), and probably many others depending on which Unix flavor you run. This document deals only with the first: Internet Sockets.
Whats this? There are two types of Internet sockets? Yes. Well, no. Im lying. There are more, but I didnt want to scare you. Im only going to talk about two types here. Except for this sentence, where Im going to tell you that Raw Sockets are also very powerful and you should look them up.
All right, already. What are the two types? One is Stream Sockets; the other is Datagram Sockets, which may hereafter be referred to as SOCK_STREAM and SOCK_DGRAM, respectively. Datagram sockets are sometimes called connectionless sockets. (Though they can be connect()d if you really want. See connect(), below.)
Stream sockets are reliable two-way connected communication streams. If you output two items into the socket in the order 1, 2, they will arrive in the order 1, 2 at the opposite end. They will also be error-free. Im so certain, in fact, they will be error-free, that Im just going to put my fingers in my ears and chant la la la la if anyone tries to claim otherwise.
What uses stream sockets? Well, you may have heard of the telnet or ssh applications, yes? They use stream sockets. All the characters you type need to arrive in the same order you type them, right? Also, web browsers use the Hypertext Transfer Protocol (HTTP) which uses stream sockets to get pages. Indeed, if you telnet to a web site on port 80, and type GET / HTTP/1.0 and hit RETURN twice, itll dump the HTML back at you!
If you dont have telnet installed and dont want to install it, or your telnet is being picky about connecting to clients, the guide comes with a telnet-like program called telnot7. This should work well for all the needs of the guide. (Note that telnet is actually a specd networking protocol8, and telnot doesnt implement this protocol at all.)
How do stream sockets achieve this high level of data transmission quality? They use a protocol called The Transmission Control Protocol, otherwise known as TCP (see RFC 7939 for extremely detailed info on TCP). TCP makes sure your data arrives sequentially and error-free. You may have heard TCP before as the better half of TCP/IP where IP stands for Internet Protocol (see RFC 79110). IP deals primarily with Internet routing and is not generally responsible for data integrity.

Cool. What about Datagram sockets? Why are they called connectionless? What is the deal, here, anyway? Why are they unreliable? Well, here are some facts: if you send a datagram, it may arrive. It may arrive out of order. If it arrives, the data within the packet will be error-free.
Datagram sockets also use IP for routing, but they dont use TCP; they use the User Datagram Protocol, or UDP (see RFC 76811).
Why are they connectionless? Well, basically, its because you dont have to maintain an open connection as you do with stream sockets. You just build a packet, slap an IP header on it with destination information, and send it out. No connection needed. They are generally used either when a TCP stack is unavailable or when a few dropped packets here and there dont mean the end of the Universe. Sample applications: tftp (trivial file transfer protocol, a little brother to FTP), dhcpcd (a DHCP client), multiplayer games, streaming audio, video conferencing, etc.

Wait a minute! tftp and dhcpcd are used to transfer binary applications from one host to another! Data cant be lost if you expect the application to work when it arrives! What kind of dark magic is this?
Well, my human friend, tftp and similar programs have their own protocol on top of UDP. For example, the tftp protocol says that for each packet that gets sent, the recipient has to send back a packet that says, I got it! (an ACK packet). If the sender of the original packet gets no reply in, say, five seconds, hell re-transmit the packet until he finally gets an ACK. This acknowledgment procedure is very important when implementing reliable SOCK_DGRAM applications.
For unreliable applications like games, audio, or video, you just ignore the dropped packets, or perhaps try to cleverly compensate for them. (Quake players will know the manifestation this effect by the technical term: accursed lag. The word accursed, in this case, represents any extremely profane utterance.)
Why would you use an unreliable underlying protocol? Two reasons: speed and speed. Its way faster to fire-and-forget than it is to keep track of what has arrived safely and make sure its in order and all that. If youre sending chat messages, TCP is great; if youre sending 40 positional updates per second of the players in the world, maybe it doesnt matter so much if one or two get dropped, and UDP is a good choice.
Since I just mentioned layering of protocols, its time to talk about how networks really work, and to show some examples of how SOCK_DGRAM packets are built. Practically, you can probably skip this section. Its good background, however.
Hey, kids, its time to learn about Data Encapsulation! This is very very important. Its so important that you might just learn about it if you take the networks course here at Chico State ;-). Basically, it says this: a packet is born, the packet is wrapped (encapsulated) in a header (and rarely a footer) by the first protocol (say, the TFTP protocol), then the whole thing (TFTP header included) is encapsulated again by the next protocol (say, UDP), then again by the next (IP), then again by the final protocol on the hardware (physical) layer (say, Ethernet).
When another computer receives the packet, the hardware strips the Ethernet header, the kernel strips the IP and UDP headers, the TFTP program strips the TFTP header, and it finally has the data.
Now I can finally talk about the infamous Layered Network Model (aka ISO/OSI). This Network Model describes a system of network functionality that has many advantages over other models. For instance, you can write sockets programs that are exactly the same without caring how the data is physically transmitted (serial, thin Ethernet, AUI, whatever) because programs on lower levels deal with it for you. The actual network hardware and topology is transparent to the socket programmer.
Without any further ado, Ill present the layers of the full-blown model. Remember this for network class exams:
The Physical Layer is the hardware (serial, Ethernet, etc.). The Application Layer is just about as far from the physical layer as you can imagineits the place where users interact with the network.
Now, this model is so general you could probably use it as an automobile repair guide if you really wanted to. A layered model more consistent with Unix might be:
At this point in time, you can probably see how these layers correspond to the encapsulation of the original data.
See how much work there is in building a simple packet? Jeez! And you have to type in the packet headers yourself using cat! Just kidding. All you have to do for stream sockets is send() the data out. All you have to do for datagram sockets is encapsulate the packet in the method of your choosing and sendto() it out. The kernel builds the Transport Layer and Internet Layer on for you and the hardware does the Network Access Layer. Ah, modern technology.
So ends our brief foray into network theory. Oh yes, I forgot to tell you everything I wanted to say about routing: nothing! Thats right, Im not going to talk about it at all. The router strips the packet to the IP header, consults its routing table, blah blah blah. Check out the IP RFC12 if you really really care. If you never learn about it, well, youll live.
Heres the part of the game where we get to talk code for a change.
But first, lets discuss more non-code! Yay! First I want to talk about IP addresses and ports for just a tad so we have that sorted out. Then well talk about how the sockets API stores and manipulates IP addresses and other data.
In the good old days back when Ben Kenobi was still called Obi Wan Kenobi, there was a wonderful network routing system called The Internet Protocol Version 4, also called IPv4. It had addresses made up of four bytes (A.K.A. four octets), and was commonly written in dots and numbers form, like so: 192.0.2.111.
Youve probably seen it around.
In fact, as of this writing, virtually every site on the Internet uses IPv4.
Everyone, including Obi Wan, was happy. Things were great, until some naysayer by the name of Vint Cerf warned everyone that we were about to run out of IPv4 addresses!
(Besides warning everyone of the Coming IPv4 Apocalypse Of Doom And Gloom, Vint Cerf13 is also well-known for being The Father Of The Internet. So I really am in no position to second-guess his judgment.)
Run out of addresses? How could this be? I mean, there are like billions of IP addresses in a 32-bit IPv4 address. Do we really have billions of computers out there?
Yes.
Also, in the beginning, when there were only a few computers and everyone thought a billion was an impossibly large number, some big organizations were generously allocated millions of IP addresses for their own use. (Such as Xerox, MIT, Ford, HP, IBM, GE, AT&T, and some little company called Apple, to name a few.)
In fact, if it werent for several stopgap measures, we would have run out a long time ago.
But now were living in an era where were talking about every human having an IP address, every computer, every calculator, every phone, every parking meter, and (why not) every puppy dog, as well.
And so, IPv6 was born. Since Vint Cerf is probably immortal (even if his physical form should pass on, heaven forbid, he is probably already existing as some kind of hyper-intelligent ELIZA14 program out in the depths of the Internet2), no one wants to have to hear him say again I told you so if we dont have enough addresses in the next version of the Internet Protocol.
What does this suggest to you?
That we need a lot more addresses. That we need not just twice as many addresses, not a billion times as many, not a thousand trillion times as many, but 79 MILLION BILLION TRILLION times as many possible addresses! Thatll show em!
Youre saying, Beej, is that true? I have every reason to disbelieve large numbers. Well, the difference between 32 bits and 128 bits might not sound like a lot; its only 96 more bits, right? But remember, were talking powers here: 32 bits represents some 4 billion numbers (232), while 128 bits represents about 340 trillion trillion trillion numbers (for real, 2128). Thats like a million IPv4 Internets for every single star in the Universe.
Forget this dots-and-numbers look of IPv4, too; now weve got a hexadecimal representation, with each two-byte chunk separated by a colon, like this:
Thats not all! Lots of times, youll have an IP address with lots of zeros in it, and you can compress them between two colons. And you can leave off leading zeros for each byte pair. For instance, each of these pairs of addresses are equivalent:
The address ::1 is the loopback address. It always means this machine Im running on now. In IPv4, the loopback address is 127.0.0.1.
Finally, theres an IPv4-compatibility mode for IPv6 addresses that you might come across. If you want, for example, to represent the IPv4 address 192.0.2.33 as an IPv6 address, you use the following notation: ::ffff:192.0.2.33.
Were talking serious fun.
In fact, its such serious fun, that the Creators of IPv6 have quite cavalierly lopped off trillions and trillions of addresses for reserved use, but we have so many, frankly, whos even counting anymore? There are plenty left over for every man, woman, child, puppy, and parking meter on every planet in the galaxy. And believe me, every planet in the galaxy has parking meters. You know its true.
For organizational reasons, its sometimes convenient to declare that this first part of this IP address up through this bit is the network portion of the IP address, and the remainder is the host portion.
For instance, with IPv4, you might have 192.0.2.12, and we could say that the first three bytes are the network and the last byte was the host. Or, put another way, were talking about host 12 on network 192.0.2.0 (see how we zero out the byte that was the host).
And now for more outdated information! Ready? In the Ancient Times, there were classes of subnets, where the first one, two, or three bytes of the address was the network part. If you were lucky enough to have one byte for the network and three for the host, you could have 24 bits-worth of hosts on your network (16 million or so). That was a Class A network. On the opposite end was a Class C, with three bytes of network, and one byte of host (256 hosts, minus a couple that were reserved).
So as you can see, there were just a few Class As, a huge pile of Class Cs, and some Class Bs in the middle.
The network portion of the IP address is described by something called the netmask, which you bitwise-AND with the IP address to get the network number out of it. The netmask usually looks something like 255.255.255.0. (E.g. with that netmask, if your IP is 192.0.2.12, then your network is 192.0.2.12 AND 255.255.255.0 which gives 192.0.2.0.)
Unfortunately, it turned out that this wasnt fine-grained enough for the eventual needs of the Internet; we were running out of Class C networks quite quickly, and we were most definitely out of Class As, so dont even bother to ask. To remedy this, The Powers That Be allowed for the netmask to be an arbitrary number of bits, not just 8, 16, or 24. So you might have a netmask of, say 255.255.255.252, which is 30 bits of network, and 2 bits of host allowing for four hosts on the network. (Note that the netmask is ALWAYS a bunch of 1-bits followed by a bunch of 0-bits.)
But its a bit unwieldy to use a big string of numbers like 255.192.0.0 as a netmask. First of all, people dont have an intuitive idea of how many bits that is, and secondly, its really not compact. So the New Style came along, and its much nicer. You just put a slash after the IP address, and then follow that by the number of network bits in decimal. Like this: 192.0.2.12/30.
Or, for IPv6, something like this: 2001:db8::/32 or 2001:db8:5413:4028::9db9/64.
If youll kindly remember, I presented you earlier with the Layered Network Model which had the Internet Layer (IP) split off from the Host-to-Host Transport Layer (TCP and UDP). Get up to speed on that before the next paragraph.
Turns out that besides an IP address (used by the IP layer), there is another address that is used by TCP (stream sockets) and, coincidentally, by UDP (datagram sockets). It is the port number. Its a 16-bit number thats like the local address for the connection.
Think of the IP address as the street address of a hotel, and the port number as the room number. Thats a decent analogy; maybe later Ill come up with one involving the automobile industry.
Say you want to have a computer that handles incoming mail AND web serviceshow do you differentiate between the two on a computer with a single IP address?
Well, different services on the Internet have different well-known port numbers. You can see them all in the Big IANA Port List15 or, if youre on a Unix box, in your /etc/services file. HTTP (the web) is port 80, telnet is port 23, SMTP is port 25, the game DOOM16 used port 666, etc. and so on. Ports under 1024 are often considered special, and usually require special OS privileges to use.
And thats about it!
 By Order of the Realm! There shall be two byte orderings, hereafter to be known as Lame and Magnificent!
I joke, but one really is better than the other. :-)
There really is no easy way to say this, so Ill just blurt it out: your computer might have been storing bytes in reverse order behind your back. I know! No one wanted to have to tell you.
The thing is, everyone in the Internet world has generally agreed that if you want to represent the two-byte hex number, say b34f, youll store it in two sequential bytes b3 followed by 4f. Makes sense, and, as Wilford Brimley17 would tell you, its the Right Thing To Do. This number, stored with the big end first, is called Big-Endian.
Unfortunately, a few computers scattered here and there throughout the world, namely anything with an Intel or Intel-compatible processor, store the bytes reversed, so b34f would be stored in memory as the sequential bytes 4f followed by b3. This storage method is called Little-Endian.
But wait, Im not done with terminology yet! The more-sane Big-Endian is also called Network Byte Order because thats the order us network types like.
Your computer stores numbers in Host Byte Order. If its an Intel 80x86, Host Byte Order is Little-Endian. If its a Motorola 68k, Host Byte Order is Big-Endian. If its a PowerPC, Host Byte Order is well, it depends!
A lot of times when youre building packets or filling out data structures youll need to make sure your two- and four-byte numbers are in Network Byte Order. But how can you do this if you dont know the native Host Byte Order?
Good news! You just get to assume the Host Byte Order isnt right, and you always run the value through a function to set it to Network Byte Order. The function will do the magic conversion if it has to, and this way your code is portable to machines of differing endianness.
All righty. There are two types of numbers that you can convert: short (two bytes) and long (four bytes). These functions work for the unsigned variations as well. Say you want to convert a short from Host Byte Order to Network Byte Order. Start with h for host, follow it with to, then n for network, and s for short: h-to-n-s, or htons() (read: Host to Network Short).
Its almost too easy
You can use every combination of n, h, s, and l you want, not counting the really stupid ones. For example, there is NOT a stolh() (Short to Long Host) functionnot at this party, anyway. But there are:
Basically, youll want to convert the numbers to Network Byte Order before they go out on the wire, and convert them to Host Byte Order as they come in off the wire.
I dont know of a 64-bit variant, sorry. And if you want to do floating point, check out the section on Serialization, far below.
Assume the numbers in this document are in Host Byte Order unless I say otherwise.
Well, were finally here. Its time to talk about programming. In this section, Ill cover various data types used by the sockets interface, since some of them are a real bear to figure out.
First the easy one: a socket descriptor. A socket descriptor is the following type:
Just a regular int.
Things get weird from here, so just read through and bear with me.
My First Structstruct addrinfo. This structure is a more recent invention, and is used to prep the socket address structures for subsequent use. Its also used in host name lookups, and service name lookups. Thatll make more sense later when we get to actual usage, but just know for now that its one of the first things youll call when making a connection.
Youll load this struct up a bit, and then call getaddrinfo(). Itll return a pointer to a new linked list of these structures filled out with all the goodies you need.
You can force it to use IPv4 or IPv6 in the ai_family field, or leave it as AF_UNSPEC to use whatever. This is cool because your code can be IP version-agnostic.
Note that this is a linked list: ai_next points at the next elementthere could be several results for you to choose from. Id use the first result that worked, but you might have different business needs; I dont know everything, man!
Youll see that the ai_addr field in the struct addrinfo is a pointer to a struct sockaddr. This is where we start getting into the nitty-gritty details of whats inside an IP address structure.
You might not usually need to write to these structures; oftentimes, a call to getaddrinfo() to fill out your struct addrinfo for you is all youll need. You will, however, have to peer inside these structs to get the values out, so Im presenting them here.
(Also, all the code written before struct addrinfo was invented we packed all this stuff by hand, so youll see a lot of IPv4 code out in the wild that does exactly that. You know, in old versions of this guide and so on.)
Some structs are IPv4, some are IPv6, and some are both. Ill make notes of which are what.
Anyway, the struct sockaddr holds socket address information for many types of sockets.
sa_family can be a variety of things, but itll be AF_INET (IPv4) or AF_INET6 (IPv6) for everything we do in this document. sa_data contains a destination address and port number for the socket. This is rather unwieldy since you dont want to tediously pack the address in the sa_data by hand.
To deal with struct sockaddr, programmers created a parallel structure: struct sockaddr_in (in for Internet) to be used with IPv4.
And this is the important bit: a pointer to a struct sockaddr_in can be cast to a pointer to a struct sockaddr and vice-versa. So even though connect() wants a struct sockaddr*, you can still use a struct sockaddr_in and cast it at the last minute!
This structure makes it easy to reference elements of the socket address. Note that sin_zero (which is included to pad the structure to the length of a struct sockaddr) should be set to all zeros with the function memset(). Also, notice that sin_family corresponds to sa_family in a struct sockaddr and should be set to AF_INET. Finally, the sin_port must be in Network Byte Order (by using htons()!)
Lets dig deeper! You see the sin_addr field is a struct in_addr. What is that thing? Well, not to be overly dramatic, but its one of the scariest unions of all time:
Whoa! Well, it used to be a union, but now those days seem to be gone. Good riddance. So if you have declared ina to be of type struct sockaddr_in, then ina.sin_addr.s_addr references the 4-byte IP address (in Network Byte Order). Note that even if your system still uses the God-awful union for struct in_addr, you can still reference the 4-byte IP address in exactly the same way as I did above (this due to #defines).
What about IPv6? Similar structs exist for it, as well:
Note that IPv6 has an IPv6 address and a port number, just like IPv4 has an IPv4 address and a port number.
Also note that Im not going to talk about the IPv6 flow information or Scope ID fields for the moment this is just a starter guide. :-)
Last but not least, here is another simple structure, struct sockaddr_storage that is designed to be large enough to hold both IPv4 and IPv6 structures. See, for some calls, sometimes you dont know in advance if its going to fill out your struct sockaddr with an IPv4 or IPv6 address. So you pass in this parallel structure, very similar to struct sockaddr except larger, and then cast it to the type you need:
Whats important is that you can see the address family in the ss_family fieldcheck this to see if its AF_INET or AF_INET6 (for IPv4 or IPv6). Then you can cast it to a struct sockaddr_in or struct sockaddr_in6 if you wanna.
Fortunately for you, there are a bunch of functions that allow you to manipulate IP addresses. No need to figure them out by hand and stuff them in a long with the << operator.
First, lets say you have a struct sockaddr_in ina, and you have an IP address 10.12.110.57 or 2001:db8:63b3:1::3490 that you want to store into it. The function you want to use, inet_pton(), converts an IP address in numbers-and-dots notation into either a struct in_addr or a struct in6_addr depending on whether you specify AF_INET or AF_INET6. (pton stands for presentation to networkyou can call it printable to network if thats easier to remember.) The conversion can be made as follows:
(Quick note: the old way of doing things used a function called inet_addr() or another function called inet_aton(); these are now obsolete and dont work with IPv6.)
Now, the above code snippet isnt very robust because there is no error checking. See, inet_pton() returns -1 on error, or 0 if the address is messed up. So check to make sure the result is greater than 0 before using!
All right, now you can convert string IP addresses to their binary representations. What about the other way around? What if you have a struct in_addr and you want to print it in numbers-and-dots notation? (Or a struct in6_addr that you want in, uh, hex-and-colons notation.) In this case, youll want to use the function inet_ntop() (ntop means network to presentationyou can call it network to printable if thats easier to remember), like this:
When you call it, youll pass the address type (IPv4 or IPv6), the address, a pointer to a string to hold the result, and the maximum length of that string. (Two macros conveniently hold the size of the string youll need to hold the largest IPv4 or IPv6 address: INET_ADDRSTRLEN and INET6_ADDRSTRLEN.)
(Another quick note to mention once again the old way of doing things: the historical function to do this conversion was called inet_ntoa(). Its also obsolete and wont work with IPv6.)
Lastly, these functions only work with numeric IP addressesthey wont do any nameserver DNS lookup on a hostname, like www.example.com. You will use getaddrinfo() to do that, as youll see later on.
 Lots of places have a firewall that hides the network from the rest of the world for their own protection. And often times, the firewall translates internal IP addresses to external (that everyone else in the world knows) IP addresses using a process called Network Address Translation, or NAT.
Are you getting nervous yet? Wheres he going with all this weird stuff?
Well, relax and buy yourself a non-alcoholic (or alcoholic) drink, because as a beginner, you dont even have to worry about NAT, since its done for you transparently. But I wanted to talk about the network behind the firewall in case you started getting confused by the network numbers you were seeing.
For instance, I have a firewall at home. I have two static IPv4 addresses allocated to me by the DSL company, and yet I have seven computers on the network. How is this possible? Two computers cant share the same IP address, or else the data wouldnt know which one to go to!
The answer is: they dont share the same IP addresses. They are on a private network with 24 million IP addresses allocated to it. They are all just for me. Well, all for me as far as anyone else is concerned. Heres whats happening:
If I log into a remote computer, it tells me Im logged in from 192.0.2.33 which is the public IP address my ISP has provided to me. But if I ask my local computer what its IP address is, it says 10.0.0.5. Who is translating the IP address from one to the other? Thats right, the firewall! Its doing NAT!
10.x.x.x is one of a few reserved networks that are only to be used either on fully disconnected networks, or on networks that are behind firewalls. The details of which private network numbers are available for you to use are outlined in RFC 191818, but some common ones youll see are 10.x.x.x and 192.168.x.x, where x is 0-255, generally. Less common is 172.y.x.x, where y goes between 16 and 31.
Networks behind a NATing firewall dont need to be on one of these reserved networks, but they commonly are.
(Fun fact! My external IP address isnt really 192.0.2.33. The 192.0.2.x network is reserved for make-believe real IP addresses to be used in documentation, just like this guide! Wowzers!)
 IPv6 has private networks, too, in a sense. Theyll start with fdXX: (or maybe in the future fcXX:), as per RFC 419319. NAT and IPv6 dont generally mix, however (unless youre doing the IPv6 to IPv4 gateway thing which is beyond the scope of this document)in theory youll have so many addresses at your disposal that you wont need to use NAT any longer. But if you want to allocate addresses for yourself on a network that wont route outside, this is how to do it.

But I just want to know what to change in my code to get it going with IPv6! Tell me now!
Ok! Ok!
Almost everything in here is something Ive gone over, above, but its the short version for the impatient. (Of course, there is more than this, but this is what applies to the guide.)
First of all, try to use getaddrinfo() to get all the struct sockaddr info, instead of packing the structures by hand. This will keep you IP version-agnostic, and will eliminate many of the subsequent steps.
Any place that you find youre hard-coding anything related to the IP version, try to wrap up in a helper function.
Change AF_INET to AF_INET6.
Change PF_INET to PF_INET6.
Change INADDR_ANY assignments to in6addr_any assignments, which are slightly different:
Also, the value IN6ADDR_ANY_INIT can be used as an initializer when the struct in6_addr is declared, like so:
Instead of struct sockaddr_in use struct sockaddr_in6, being sure to add 6 to the fields as appropriate (see structs, above). There is no sin6_zero field.
Instead of struct in_addr use struct in6_addr, being sure to add 6 to the fields as appropriate (see structs, above).
Instead of inet_aton() or inet_addr(), use inet_pton().
Instead of inet_ntoa(), use inet_ntop().
Instead of gethostbyname(), use the superior getaddrinfo().
Instead of gethostbyaddr(), use the superior getnameinfo() (although gethostbyaddr() can still work with IPv6).
INADDR_BROADCAST no longer works. Use IPv6 multicast instead.
Et voila!
This is the section where we get into the system calls (and other library calls) that allow you to access the network functionality of a Unix box, or any box that supports the sockets API for that matter (BSD, Windows, Linux, Mac, what-have-you.) When you call one of these functions, the kernel takes over and does all the work for you automagically.
The place most people get stuck around here is what order to call these things in. In that, the man pages are no use, as youve probably discovered. Well, to help with that dreadful situation, Ive tried to lay out the system calls in the following sections in exactly (approximately) the same order that youll need to call them in your programs.
That, coupled with a few pieces of sample code here and there, some milk and cookies (which I fear you will have to supply yourself), and some raw guts and courage, and youll be beaming data around the Internet like the Son of Jon Postel!
(Please note that for brevity, many code snippets below do not include necessary error checking. And they very commonly assume that the result from calls to getaddrinfo() succeed and return a valid entry in the linked list. Both of these situations are properly addressed in the stand-alone programs, though, so use those as a model.)
 This is a real workhorse of a function with a lot of options, but usage is actually pretty simple. It helps set up the structs you need later on.
A tiny bit of history: it used to be that you would use a function called gethostbyname() to do DNS lookups. Then youd load that information by hand into a struct sockaddr_in, and use that in your calls.
This is no longer necessary, thankfully. (Nor is it desirable, if you want to write code that works for both IPv4 and IPv6!) In these modern times, you now have the function getaddrinfo() that does all kinds of good stuff for you, including DNS and service name lookups, and fills out the structs you need, besides!
Lets take a look!
You give this function three input parameters, and it gives you a pointer to a linked-list, res, of results.
The node parameter is the host name to connect to, or an IP address.
Next is the parameter service, which can be a port number, like 80, or the name of a particular service (found in The IANA Port List20 or the /etc/services file on your Unix machine) like http or ftp or telnet or smtp or whatever.
Finally, the hints parameter points to a struct addrinfo that youve already filled out with relevant information.
Heres a sample call if youre a server who wants to listen on your hosts IP address, port 3490. Note that this doesnt actually do any listening or network setup; it merely sets up structures well use later:
Notice that I set the ai_family to AF_UNSPEC, thereby saying that I dont care if we use IPv4 or IPv6. You can set it to AF_INET or AF_INET6 if you want one or the other specifically.
Also, youll see the AI_PASSIVE flag in there; this tells getaddrinfo() to assign the address of my local host to the socket structures. This is nice because then you dont have to hardcode it. (Or you can put a specific address in as the first parameter to getaddrinfo() where I currently have NULL, up there.)
Then we make the call. If theres an error (getaddrinfo() returns non-zero), we can print it out using the function gai_strerror(), as you see. If everything works properly, though, servinfo will point to a linked list of struct addrinfos, each of which contains a struct sockaddr of some kind that we can use later! Nifty!
Finally, when were eventually all done with the linked list that getaddrinfo() so graciously allocated for us, we can (and should) free it all up with a call to freeaddrinfo().
Heres a sample call if youre a client who wants to connect to a particular server, say www.example.net port 3490. Again, this doesnt actually connect, but it sets up the structures well use later:
I keep saying that servinfo is a linked list with all kinds of address information. Lets write a quick demo program to show off this information. This short program21 will print the IP addresses for whatever host you specify on the command line:
As you see, the code calls getaddrinfo() on whatever you pass on the command line, that fills out the linked list pointed to by res, and then we can iterate over the list and print stuff out or do whatever.
(Theres a little bit of ugliness there where we have to dig into the different types of struct sockaddrs depending on the IP version. Sorry about that! Im not sure of a better way around it.)
Sample run! Everyone loves screenshots:
Now that we have that under control, well use the results we get from getaddrinfo() to pass to other socket functions and, at long last, get our network connection established! Keep reading!
I guess I can put it off no longerI have to talk about the socket() system call. Heres the breakdown:
But what are these arguments? They allow you to say what kind of socket you want (IPv4 or IPv6, stream or datagram, and TCP or UDP).
It used to be people would hardcode these values, and you can absolutely still do that. (domain is PF_INET or PF_INET6, type is SOCK_STREAM or SOCK_DGRAM, and protocol can be set to 0 to choose the proper protocol for the given type. Or you can call getprotobyname() to look up the protocol you want, tcp or udp.)
(This PF_INET thing is a close relative of the AF_INET that you can use when initializing the sin_family field in your struct sockaddr_in. In fact, theyre so closely related that they actually have the same value, and many programmers will call socket() and pass AF_INET as the first argument instead of PF_INET. Now, get some milk and cookies, because its time for a story. Once upon a time, a long time ago, it was thought that maybe an address family (what the AF in AF_INET stands for) might support several protocols that were referred to by their protocol family (what the PF in PF_INET stands for). That didnt happen. And they all lived happily ever after, The End. So the most correct thing to do is to use AF_INET in your struct sockaddr_in and PF_INET in your call to socket().)
Anyway, enough of that. What you really want to do is use the values from the results of the call to getaddrinfo(), and feed them into socket() directly like this:
socket() simply returns to you a socket descriptor that you can use in later system calls, or -1 on error. The global variable errno is set to the errors value (see the errno man page for more details, and a quick note on using errno in multithreaded programs).
Fine, fine, fine, but what good is this socket? The answer is that its really no good by itself, and you need to read on and make more system calls for it to make any sense.
 Once you have a socket, you might have to associate that socket with a port on your local machine. (This is commonly done if youre going to listen() for incoming connections on a specific portmultiplayer network games do this when they tell you to connect to 192.168.5.10 port 3490.) The port number is used by the kernel to match an incoming packet to a certain processs socket descriptor. If youre going to only be doing a connect() (because youre the client, not the server), this is probably unnecessary. Read it anyway, just for kicks.
Here is the synopsis for the bind() system call:
sockfd is the socket file descriptor returned by socket(). my_addr is a pointer to a struct sockaddr that contains information about your address, namely, port and IP address. addrlen is the length in bytes of that address.
Whew. Thats a bit to absorb in one chunk. Lets have an example that binds the socket to the host the program is running on, port 3490:
By using the AI_PASSIVE flag, Im telling the program to bind to the IP of the host its running on. If you want to bind to a specific local IP address, drop the AI_PASSIVE and put an IP address in for the first argument to getaddrinfo().
bind() also returns -1 on error and sets errno to the errors value.
Lots of old code manually packs the struct sockaddr_in before calling bind(). Obviously this is IPv4-specific, but theres really nothing stopping you from doing the same thing with IPv6, except that using getaddrinfo() is going to be easier, generally. Anyway, the old code looks something like this:
In the above code, you could also assign INADDR_ANY to the s_addr field if you wanted to bind to your local IP address (like the AI_PASSIVE flag, above). The IPv6 version of INADDR_ANY is a global variable in6addr_any that is assigned into the sin6_addr field of your struct sockaddr_in6. (There is also a macro IN6ADDR_ANY_INIT that you can use in a variable initializer.)
Another thing to watch out for when calling bind(): dont go underboard with your port numbers. All ports below 1024 are RESERVED (unless youre the superuser)! You can have any port number above that, right up to 65535 (provided they arent already being used by another program).
Sometimes, you might notice, you try to rerun a server and bind() fails, claiming Address already in use. What does that mean? Well, a little bit of a socket that was connected is still hanging around in the kernel, and its hogging the port. You can either wait for it to clear (a minute or so), or add code to your program allowing it to reuse the port, like this:
 
 One small extra final note about bind(): there are times when you wont absolutely have to call it. If you are connect()ing to a remote machine and you dont care what your local port is (as is the case with telnet where you only care about the remote port), you can simply call connect(), itll check to see if the socket is unbound, and will bind() it to an unused local port if necessary.
 Lets just pretend for a few minutes that youre a telnet application. Your user commands you (just like in the movie TRON) to get a socket file descriptor. You comply and call socket(). Next, the user tells you to connect to 10.12.110.57 on port 23 (the standard telnet port). Yow! What do you do now?
Lucky for you, program, youre now perusing the section on connect()how to connect to a remote host. So read furiously onward! No time to lose!
The connect() call is as follows:
sockfd is our friendly neighborhood socket file descriptor, as returned by the socket() call, serv_addr is a struct sockaddr containing the destination port and IP address, and addrlen is the length in bytes of the server address structure.
All of this information can be gleaned from the results of the getaddrinfo() call, which rocks.
Is this starting to make more sense? I cant hear you from here, so Ill just have to hope that it is. Lets have an example where we make a socket connection to www.example.com, port 3490:
Again, old-school programs filled out their own struct sockaddr_ins to pass to connect(). You can do that if you want to. See the similar note in the bind() section, above.
Be sure to check the return value from connect()itll return -1 on error and set the variable errno.

Also, notice that we didnt call bind(). Basically, we dont care about our local port number; we only care where were going (the remote port). The kernel will choose a local port for us, and the site we connect to will automatically get this information from us. No worries.
 OK, time for a change of pace. What if you dont want to connect to a remote host. Say, just for kicks, that you want to wait for incoming connections and handle them in some way. The process is two step: first you listen(), then you accept() (see below).
The listen() call is fairly simple, but requires a bit of explanation:
sockfd is the usual socket file descriptor from the socket() system call. backlog is the number of connections allowed on the incoming queue. What does that mean? Well, incoming connections are going to wait in this queue until you accept() them (see below) and this is the limit on how many can queue up. Most systems silently limit this number to about 20; you can probably get away with setting it to 5 or 10.
Again, as per usual, listen() returns -1 and sets errno on error.
Well, as you can probably imagine, we need to call bind() before we call listen() so that the server is running on a specific port. (You have to be able to tell your buddies which port to connect to!) So if youre going to be listening for incoming connections, the sequence of system calls youll make is:
Ill just leave that in the place of sample code, since its fairly self-explanatory. (The code in the accept() section, below, is more complete.) The really tricky part of this whole sha-bang is the call to accept().
 Get readythe accept() call is kinda weird! Whats going to happen is this: someone far far away will try to connect() to your machine on a port that you are listen()ing on. Their connection will be queued up waiting to be accept()ed.You call accept() and you tell it to get the pending connection. Itll return to you a brand new socket file descriptor to use for this single connection! Thats right, suddenly you have two socket file descriptors for the price of one! The original one is still listening for more new connections, and the newly created one is finally ready to send() and recv(). Were there!
The call is as follows:
sockfd is the listen()ing socket descriptor. Easy enough. addr will usually be a pointer to a local struct sockaddr_storage. This is where the information about the incoming connection will go (and with it you can determine which host is calling you from which port). addrlen is a local integer variable that should be set to sizeof(struct sockaddr_storage) before its address is passed to accept(). accept() will not put more than that many bytes into addr. If it puts fewer in, itll change the value of addrlen to reflect that.
Guess what? accept() returns -1 and sets errno if an error occurs. Betcha didnt figure that.
Like before, this is a bunch to absorb in one chunk, so heres a sample code fragment for your perusal:
Again, note that we will use the socket descriptor new_fd for all send() and recv() calls. If youre only getting one single connection ever, you can close() the listening sockfd in order to prevent more incoming connections on the same port, if you so desire.
These two functions are for communicating over stream sockets or connected datagram sockets. If you want to use regular unconnected datagram sockets, youll need to see the section on sendto() and recvfrom(), below.
 The send() call:
sockfd is the socket descriptor you want to send data to (whether its the one returned by socket() or the one you got with accept()). msg is a pointer to the data you want to send, and len is the length of that data in bytes. Just set flags to 0. (See the send() man page for more information concerning flags.)
Some sample code might be:
send() returns the number of bytes actually sent outthis might be less than the number you told it to send! See, sometimes you tell it to send a whole gob of data and it just cant handle it. Itll fire off as much of the data as it can, and trust you to send the rest later. Remember, if the value returned by send() doesnt match the value in len, its up to you to send the rest of the string. The good news is this: if the packet is small (less than 1K or so) it will probably manage to send the whole thing all in one go. Again, -1 is returned on error, and errno is set to the error number.
 The recv() call is similar in many respects:
sockfd is the socket descriptor to read from, buf is the buffer to read the information into, len is the maximum length of the buffer, and flags can again be set to 0. (See the recv() man page for flag information.)
recv() returns the number of bytes actually read into the buffer, or -1 on error (with errno set, accordingly).
Wait! recv() can return 0. This can mean only one thing: the remote side has closed the connection on you! A return value of 0 is recv()s way of letting you know this has occurred.
There, that was easy, wasnt it? You can now pass data back and forth on stream sockets! Whee! Youre a Unix Network Programmer!
 This is all fine and dandy, I hear you saying, but where does this leave me with unconnected datagram sockets? No problemo, amigo. We have just the thing.
Since datagram sockets arent connected to a remote host, guess which piece of information we need to give before we send a packet? Thats right! The destination address! Heres the scoop:
As you can see, this call is basically the same as the call to send() with the addition of two other pieces of information. to is a pointer to a struct sockaddr (which will probably be another struct sockaddr_in or struct sockaddr_in6 or struct sockaddr_storage that you cast at the last minute) which contains the destination IP address and port. tolen, an int deep-down, can simply be set to sizeof *to or sizeof(struct sockaddr_storage).
To get your hands on the destination address structure, youll probably either get it from getaddrinfo(), or from recvfrom(), below, or youll fill it out by hand.
Just like with send(), sendto() returns the number of bytes actually sent (which, again, might be less than the number of bytes you told it to send!), or -1 on error.
Equally similar are recv() and recvfrom(). The synopsis of recvfrom() is:
Again, this is just like recv() with the addition of a couple fields. from is a pointer to a local struct sockaddr_storage that will be filled with the IP address and port of the originating machine. fromlen is a pointer to a local int that should be initialized to sizeof *from or sizeof(struct sockaddr_storage). When the function returns, fromlen will contain the length of the address actually stored in from.
recvfrom() returns the number of bytes received, or -1 on error (with errno set accordingly).
So, heres a question: why do we use struct sockaddr_storage as the socket type? Why not struct sockaddr_in? Because, you see, we want to not tie ourselves down to IPv4 or IPv6. So we use the generic struct sockaddr_storage which we know will be big enough for either.
(So heres another question: why isnt struct sockaddr itself big enough for any address? We even cast the general-purpose struct sockaddr_storage to the general-purpose struct sockaddr! Seems extraneous and redundant, huh. The answer is, it just isnt big enough, and Id guess that changing it at this point would be Problematic. So they made a new one.)
Remember, if you connect() a datagram socket, you can then simply use send() and recv() for all your transactions. The socket itself is still a datagram socket and the packets still use UDP, but the socket interface will automatically add the destination and source information for you.
Whew! Youve been send()ing and recv()ing data all day long, and youve had it. Youre ready to close the connection on your socket descriptor. This is easy. You can just use the regular Unix file descriptor close() function:
This will prevent any more reads and writes to the socket. Anyone attempting to read or write the socket on the remote end will receive an error.
Just in case you want a little more control over how the socket closes, you can use the shutdown() function. It allows you to cut off communication in a certain direction, or both ways (just like close() does). Synopsis:
sockfd is the socket file descriptor you want to shutdown, and how is one of the following:
shutdown() returns 0 on success, and -1 on error (with errno set accordingly).
If you deign to use shutdown() on unconnected datagram sockets, it will simply make the socket unavailable for further send() and recv() calls (remember that you can use these if you connect() your datagram socket).
Its important to note that shutdown() doesnt actually close the file descriptorit just changes its usability. To free a socket descriptor, you need to use close().
Nothing to it.
(Except to remember that if youre using Windows and Winsock that you should call closesocket() instead of close().)
 This function is so easy.
Its so easy, I almost didnt give it its own section. But here it is anyway.
The function getpeername() will tell you who is at the other end of a connected stream socket. The synopsis:
sockfd is the descriptor of the connected stream socket, addr is a pointer to a struct sockaddr (or a struct sockaddr_in) that will hold the information about the other side of the connection, and addrlen is a pointer to an int, that should be initialized to sizeof *addr or sizeof(struct sockaddr).
The function returns -1 on error and sets errno accordingly.
Once you have their address, you can use inet_ntop(), getnameinfo(), or gethostbyaddr() to print or get more information. No, you cant get their login name. (Ok, ok. If the other computer is running an ident daemon, this is possible. This, however, is beyond the scope of this document. Check out RFC 141322 for more info.)
 Even easier than getpeername() is the function gethostname(). It returns the name of the computer that your program is running on. The name can then be used by getaddrinfo(), above, to determine the IP address of your local machine.
What could be more fun? I could think of a few things, but they dont pertain to socket programming. Anyway, heres the breakdown:
The arguments are simple: hostname is a pointer to an array of chars that will contain the hostname upon the functions return, and size is the length in bytes of the hostname array.
The function returns 0 on successful completion, and -1 on error, setting errno as usual.

Its a client-server world, baby. Just about everything on the network deals with client processes talking to server processes and vice-versa. Take telnet, for instance. When you connect to a remote host on port 23 with telnet (the client), a program on that host (called telnetd, the server) springs to life. It handles the incoming telnet connection, sets you up with a login prompt, etc.
The exchange of information between client and server is summarized in the above diagram.
Note that the client-server pair can speak SOCK_STREAM, SOCK_DGRAM, or anything else (as long as theyre speaking the same thing). Some good examples of client-server pairs are telnet/telnetd, ftp/ftpd, or Firefox/Apache. Every time you use ftp, theres a remote program, ftpd, that serves you.
Often, there will only be one server on a machine, and that server will handle multiple clients using fork(). The basic routine is: server will wait for a connection, accept() it, and fork() a child process to handle it. This is what our sample server does in the next section.

All this server does is send the string Hello, world! out over a stream connection. All you need to do to test this server is run it in one window, and telnet to it from another with:
where remotehostname is the name of the machine youre running it on.
The server code23:
In case youre curious, I have the code in one big main() function for (I feel) syntactic clarity. Feel free to split it into smaller functions if it makes you feel better.
(Also, this whole sigaction() thing might be new to youthats OK. The code thats there is responsible for reaping zombie processes that appear as the fork()ed child processes exit. If you make lots of zombies and dont reap them, your system administrator will become agitated.)
You can get the data from this server by using the client listed in the next section.


This guys even easier than the server. All this client does is connect to the host you specify on the command line, port 3490. It gets the string that the server sends.
The client source24:
Notice that if you dont run the server before you run the client, connect() returns Connection refused. Very useful.


Weve already covered the basics of UDP datagram sockets with our discussion of sendto() and recvfrom(), above, so Ill just present a couple of sample programs: talker.c and listener.c.
listener sits on a machine waiting for an incoming packet on port 4950. talker sends a packet to that port, on the specified machine, that contains whatever the user enters on the command line.
Because datagram sockets are connectionless and just fire packets off into the ether with callous disregard for success, we are going to tell the client and server to use specifically IPv6. This way we avoid the situation where the server is listening on IPv6 and the client sends on IPv4; the data simply would not be received. (In our connected TCP stream sockets world, we might still have the mismatch, but the error on connect() for one address family would cause us to retry for the other.)
Here is the source for listener.c25:
Notice that in our call to getaddrinfo() were finally using SOCK_DGRAM. Also, note that theres no need to listen() or accept(). This is one of the perks of using unconnected datagram sockets!


Next comes the source for talker.c26:
And thats all there is to it! Run listener on some machine, then run talker on another. Watch them communicate! Fun G-rated excitement for the entire nuclear family!
You dont even have to run the server this time! You can run talker by itself, and it just happily fires packets off into the ether where they disappear if no one is ready with a recvfrom() on the other side. Remember: data sent using UDP datagram sockets isnt guaranteed to arrive!

Except for one more tiny detail that Ive mentioned many times in the past: connected datagram sockets. I need to talk about this here, since were in the datagram section of the document. Lets say that talker calls connect() and specifies the listeners address. From that point on, talker may only send to and receive from the address specified by connect(). For this reason, you dont have to use sendto() and recvfrom(); you can simply use send() and recv().

These arent really advanced, but theyre getting out of the more basic levels weve already covered. In fact, if youve gotten this far, you should consider yourself fairly accomplished in the basics of Unix network programming! Congratulations!
So here we go into the brave new world of some of the more esoteric things you might want to learn about sockets. Have at it!

Blocking. Youve heard about itnow what the heck is it? In a nutshell, block is techie jargon for sleep. You probably noticed that when you run listener, above, it just sits there until a packet arrives. What happened is that it called recvfrom(), there was no data, and so recvfrom() is said to block (that is, sleep there) until some data arrives.
Lots of functions block. accept() blocks. All the recv() functions block. The reason they can do this is because theyre allowed to. When you first create the socket descriptor with socket(), the kernel sets it to blocking. If you dont want a socket to be blocking, you have to make a call to fcntl():
By setting a socket to non-blocking, you can effectively poll the socket for information. If you try to read from a non-blocking socket and theres no data there, its not allowed to blockit will return -1 and errno will be set to EAGAIN or EWOULDBLOCK.
(Waitit can return EAGAIN or EWOULDBLOCK? Which do you check for? The specification doesnt actually specify which your system will return, so for portability, check them both.)
Generally speaking, however, this type of polling is a bad idea. If you put your program in a busy-wait looking for data on the socket, youll suck up CPU time like it was going out of style. A more elegant solution for checking to see if theres data waiting to be read comes in the following section on poll().


What you really want to be able to do is somehow monitor a bunch of sockets at once and then handle the ones that have data ready. This way you dont have to continuously poll all those sockets to see which are ready to read.
A word of warning: poll() is horribly slow when it comes to giant numbers of connections. In those circumstances, youll get better performance out of an event library such as libevent27 that attempts to use the fastest possible method availabile on your system.
So how can you avoid polling? Not slightly ironically, you can avoid polling by using the poll() system call. In a nutshell, were going to ask the operating system to do all the dirty work for us, and just let us know when some data is ready to read on which sockets. In the meantime, our process can go to sleep, saving system resources.
The general gameplan is to keep an array of struct pollfds with information about which socket descriptors we want to monitor, and what kind of events we want to monitor for. The OS will block on the poll() call until one of those events occurs (e.g.socket ready to read!) or until a user-specified timeout occurs.
Usefully, a listen()ing socket will return ready to read when a new incoming connection is ready to be accept()ed.
Thats enough banter. How do we use this?
fds is our array of information (which sockets to monitor for what), nfds is the count of elements in the array, and timeout is a timeout in milliseconds. It returns the number of elements in the array that have had an event occur.
Lets have a look at that struct:

So were going to have an array of those, and well set the fd field for each element to a socket descriptor were interested in monitoring. And then well set the events field to indicate the type of events were interested in.
The events field is the bitwise-OR of the following:
Once you have your array of struct pollfds in order, then you can pass it to poll(), also passing the size of the array, as well as a timeout value in milliseconds. (You can specify a negative timeout to wait forever.)
After poll() returns, you can check the revents field to see if POLLIN or POLLOUT is set, indicating that event occurred.
(Theres actually more that you can do with the poll() call. See the poll() man page, below, for more details.)
Heres an example28 where well wait 2.5 seconds for data to be ready to read from standard input, i.e.when you hit RETURN:
Notice again that poll() returns the number of elements in the pfds array for which events have occurred. It doesnt tell you which elements in the array (you still have to scan for that), but it does tell you how many entries have a non-zero revents field (so you can stop scanning after you find that many).
A couple questions might come up here: how to add new file descriptors to the set I pass to poll()? For this, simply make sure you have enough space in the array for all you need, or realloc() more space as needed.
What about deleting items from the set? For this, you can copy the last element in the array over-top the one youre deleting. And then pass in one fewer as the count to poll(). Another option is that you can set any fd field to a negative number and poll() will ignore it.
How can we put it all together into a chat server that you can telnet to?
What well do is start a listener socket, and add it to the set of file descriptors to poll(). (It will show ready-to-read when theres an incoming connection.)
Then well add new connections to our struct pollfd array. And well grow it dynamically if we run out of space.
When a connection is closed, well remove it from the array.
And when a connection is ready-to-read, well read the data from it and send that data to all the other connections so they can see what the other users typed.
So give this poll server29 a try. Run it in one window, then telnet localhost 9034 from a number of other terminal windows. You should be able to see what you type in one window in the other ones (after you hit RETURN).
Not only that, but if you hit CTRL-] and type quit to exit telnet, the server should detect the disconnection and remove you from the array of file descriptors.
In the next section, well look at a similar, older function called select(). Both select() and poll() offer similar functionality and performance, and only really differ in how theyre used. select() might be slightly more portable, but is perhaps a little clunkier in use. Choose the one you like the best, as long as its supported on your system.


This function is somewhat strange, but its very useful. Take the following situation: you are a server and you want to listen for incoming connections as well as keep reading from the connections you already have.
No problem, you say, just an accept() and a couple of recv()s. Not so fast, buster! What if youre blocking on an accept() call? How are you going to recv() data at the same time? Use non-blocking sockets! No way! You dont want to be a CPU hog. What, then?
select() gives you the power to monitor several sockets at the same time. Itll tell you which ones are ready for reading, which are ready for writing, and which sockets have raised exceptions, if you really want to know that.
A word of warning: select(), though very portable, is terribly slow when it comes to giant numbers of connections. In those circumstances, youll get better performance out of an event library such as libevent30 that attempts to use the fastest possible method availabile on your system.
Without any further ado, Ill offer the synopsis of select():
The function monitors sets of file descriptors; in particular readfds, writefds, and exceptfds. If you want to see if you can read from standard input and some socket descriptor, sockfd, just add the file descriptors 0 and sockfd to the set readfds. The parameter numfds should be set to the values of the highest file descriptor plus one. In this example, it should be set to sockfd+1, since it is assuredly higher than standard input (0).
When select() returns, readfds will be modified to reflect which of the file descriptors you selected which is ready for reading. You can test them with the macro FD_ISSET(), below.
Before progressing much further, Ill talk about how to manipulate these sets. Each set is of the type fd_set. The following macros operate on this type:

Finally, what is this weirded-out struct timeval? Well, sometimes you dont want to wait forever for someone to send you some data. Maybe every 96 seconds you want to print Still Going to the terminal even though nothing has happened. This time structure allows you to specify a timeout period. If the time is exceeded and select() still hasnt found any ready file descriptors, itll return so you can continue processing.
The struct timeval has the follow fields:
Just set tv_sec to the number of seconds to wait, and set tv_usec to the number of microseconds to wait. Yes, thats _micro_seconds, not milliseconds. There are 1,000 microseconds in a millisecond, and 1,000 milliseconds in a second. Thus, there are 1,000,000 microseconds in a second. Why is it usec? The u is supposed to look like the Greek letter  (Mu) that we use for micro. Also, when the function returns, timeout might be updated to show the time still remaining. This depends on what flavor of Unix youre running.
Yay! We have a microsecond resolution timer! Well, dont count on it. Youll probably have to wait some part of your standard Unix timeslice no matter how small you set your struct timeval.
Other things of interest: If you set the fields in your struct timeval to 0, select() will timeout immediately, effectively polling all the file descriptors in your sets. If you set the parameter timeout to NULL, it will never timeout, and will wait until the first file descriptor is ready. Finally, if you dont care about waiting for a certain set, you can just set it to NULL in the call to select().
The following code snippet31 waits 2.5 seconds for something to appear on standard input:
If youre on a line buffered terminal, the key you hit should be RETURN or it will time out anyway.
Now, some of you might think this is a great way to wait for data on a datagram socketand you are right: it might be. Some Unices can use select in this manner, and some cant. You should see what your local man page says on the matter if you want to attempt it.
Some Unices update the time in your struct timeval to reflect the amount of time still remaining before a timeout. But others do not. Dont rely on that occurring if you want to be portable. (Use gettimeofday() if you need to track time elapsed. Its a bummer, I know, but thats the way it is.)

What happens if a socket in the read set closes the connection? Well, in that case, select() returns with that socket descriptor set as ready to read. When you actually do recv() from it, recv() will return 0. Thats how you know the client has closed the connection.
One more note of interest about select(): if you have a socket that is listen()ing, you can check to see if there is a new connection by putting that sockets file descriptor in the readfds set.
And that, my friends, is a quick overview of the almighty select() function.
But, by popular demand, here is an in-depth example. Unfortunately, the difference between the dirt-simple example, above, and this one here is significant. But have a look, then read the description that follows it.
This program32 acts like a simple multi-user chat server. Start it running in one window, then telnet to it (telnet hostname 9034) from multiple other windows. When you type something in one telnet session, it should appear in all the others.
Notice I have two file descriptor sets in the code: master and read_fds. The first, master, holds all the socket descriptors that are currently connected, as well as the socket descriptor that is listening for new connections.
The reason I have the master set is that select() actually changes the set you pass into it to reflect which sockets are ready to read. Since I have to keep track of the connections from one call of select() to the next, I must store these safely away somewhere. At the last minute, I copy the master into the read_fds, and then call select().
But doesnt this mean that every time I get a new connection, I have to add it to the master set? Yup! And every time a connection closes, I have to remove it from the master set? Yes, it does.
Notice I check to see when the listener socket is ready to read. When it is, it means I have a new connection pending, and I accept() it and add it to the master set. Similarly, when a client connection is ready to read, and recv() returns 0, I know the client has closed the connection, and I must remove it from the master set.
If the client recv() returns non-zero, though, I know some data has been received. So I get it, and then go through the master list and send that data to all the rest of the connected clients.
And that, my friends, is a less-than-simple overview of the almighty select() function.
Quick note to all you Linux fans out there: sometimes, in rare circumstances, Linuxs select() can return ready-to-read and then not actually be ready to read! This means it will block on the read() after the select() says it wont! Why you little! Anyway, the workaround solution is to set the O_NONBLOCK flag on the receiving socket so it errors with EWOULDBLOCK (which you can just safely ignore if it occurs). See the fcntl() reference page for more info on setting a socket to non-blocking.
In addition, here is a bonus afterthought: there is another function called poll() which behaves much the same way select() does, but with a different system for managing the file descriptor sets. Check it out!

Remember back in the section about send(), above, when I said that send() might not send all the bytes you asked it to? That is, you want it to send 512 bytes, but it returns 412. What happened to the remaining 100 bytes?
Well, theyre still in your little buffer waiting to be sent out. Due to circumstances beyond your control, the kernel decided not to send all the data out in one chunk, and now, my friend, its up to you to get the data out there.
 You could write a function like this to do it, too:
In this example, s is the socket you want to send the data to, buf is the buffer containing the data, and len is a pointer to an int containing the number of bytes in the buffer.
The function returns -1 on error (and errno is still set from the call to send()). Also, the number of bytes actually sent is returned in len. This will be the same number of bytes you asked it to send, unless there was an error. sendall() will do its best, huffing and puffing, to send the data out, but if theres an error, it gets back to you right away.
For completeness, heres a sample call to the function:

What happens on the receivers end when part of a packet arrives? If the packets are variable length, how does the receiver know when one packet ends and another begins? Yes, real-world scenarios are a royal pain in the donkeys. You probably have to encapsulate (remember that from the data encapsulation section way back there at the beginning?) Read on for details!

Its easy enough to send text data across the network, youre finding, but what happens if you want to send some binary data like ints or floats? It turns out you have a few options.
Convert the number into text with a function like sprintf(), then send the text. The receiver will parse the text back into a number using a function like strtol().
Just send the data raw, passing a pointer to the data to send().
Encode the number into a portable binary form. The receiver will decode it.
Sneak preview! Tonight only!
[Curtain raises]
Beej says, I prefer Method Three, above!
[THE END]
(Before I begin this section in earnest, I should tell you that there are libraries out there for doing this, and rolling your own and remaining portable and error-free is quite a challenge. So hunt around and do your homework before deciding to implement this stuff yourself. I include the information here for those curious about how things like this work.)
Actually all the methods, above, have their drawbacks and advantages, but, like I said, in general, I prefer the third method. First, though, lets talk about some of the drawbacks and advantages to the other two.
The first method, encoding the numbers as text before sending, has the advantage that you can easily print and read the data thats coming over the wire. Sometimes a human-readable protocol is excellent to use in a non-bandwidth-intensive situation, such as with Internet Relay Chat (IRC)33. However, it has the disadvantage that it is slow to convert, and the results almost always take up more space than the original number!
Method two: passing the raw data. This one is quite easy (but dangerous!): just take a pointer to the data to send, and call send with it.
The receiver gets it like this:
Fast, simplewhats not to like? Well, it turns out that not all architectures represent a double (or int for that matter) with the same bit representation or even the same byte ordering! The code is decidedly non-portable. (Heymaybe you dont need portability, in which case this is nice and fast.)
When packing integer types, weve already seen how the htons()-class of functions can help keep things portable by transforming the numbers into Network Byte Order, and how thats the Right Thing to do. Unfortunately, there are no similar functions for float types. Is all hope lost?
Fear not! (Were you afraid there for a second? No? Not even a little bit?) There is something we can do: we can pack (or marshal, or serialize, or one of a thousand million other names) the data into a known binary format that the receiver can unpack on the remote side.
What do I mean by known binary format? Well, weve already seen the htons() example, right? It changes (or encodes, if you want to think of it that way) a number from whatever the host format is into Network Byte Order. To reverse (unencode) the number, the receiver calls ntohs().
But didnt I just get finished saying there wasnt any such function for other non-integer types? Yes. I did. And since theres no standard way in C to do this, its a bit of a pickle (that a gratuitous pun there for you Python fans).
The thing to do is to pack the data into a known format and send that over the wire for decoding. For example, to pack floats, heres something quick and dirty with plenty of room for improvement34:
The above code is sort of a naive implementation that stores a float in a 32-bit number. The high bit (31) is used to store the sign of the number (1 means negative), and the next seven bits (30-16) are used to store the whole number portion of the float. Finally, the remaining bits (15-0) are used to store the fractional portion of the number.
Usage is fairly straightforward:
On the plus side, its small, simple, and fast. On the minus side, its not an efficient use of space and the range is severely restrictedtry storing a number greater-than 32767 in there and it wont be very happy! You can also see in the above example that the last couple decimal places are not correctly preserved.
What can we do instead? Well, The Standard for storing floating point numbers is known as IEEE-75435. Most computers use this format internally for doing floating point math, so in those cases, strictly speaking, conversion wouldnt need to be done. But if you want your source code to be portable, thats an assumption you cant necessarily make. (On the other hand, if you want things to be fast, you should optimize this out on platforms that dont need to do it! Thats what htons() and its ilk do.)
Heres some code that encodes floats and doubles into IEEE-754 format36. (Mostlyit doesnt encode NaN or Infinity, but it could be modified to do that.)
I put some handy macros up there at the top for packing and unpacking 32-bit (probably a float) and 64-bit (probably a double) numbers, but the pack754() function could be called directly and told to encode bits-worth of data (expbits of which are reserved for the normalized numbers exponent).
Heres sample usage:
The above code produces this output:
Another question you might have is how do you pack structs? Unfortunately for you, the compiler is free to put padding all over the place in a struct, and that means you cant portably send the whole thing over the wire in one chunk. (Arent you getting sick of hearing cant do this, cant do that? Sorry! To quote a friend, Whenever anything goes wrong, I always blame Microsoft. This one might not be Microsofts fault, admittedly, but my friends statement is completely true.)
Back to it: the best way to send the struct over the wire is to pack each field independently and then unpack them into the struct when they arrive on the other side.
Thats a lot of work, is what youre thinking. Yes, it is. One thing you can do is write a helper function to help pack the data for you. Itll be fun! Really!
In the book The Practice of Programming37 by Kernighan and Pike, they implement printf()-like functions called pack() and unpack() that do exactly this. Id link to them, but apparently those functions arent online with the rest of the source from the book.
(The Practice of Programming is an excellent read. Zeus saves a kitten every time I recommend it.)
At this point, Im going to drop a pointer to a Protocol Buffers implementation in C38 which Ive never used, but looks completely respectable. Python and Perl programmers will want to check out their languages pack() and unpack() functions for accomplishing the same thing. And Java has a big-ol Serializable interface that can be used in a similar way.
But if you want to write your own packing utility in C, K&Ps trick is to use variable argument lists to make printf()-like functions to build the packets. Heres a version I cooked up39 on my own based on that which hopefully will be enough to give you an idea of how such a thing can work.
(This code references the pack754() functions, above. The packi*() functions operate like the familiar htons() family, except they pack into a char array instead of another integer.)
And here is a demonstration program40 of the above code that packs some data into buf and then unpacks it into variables. Note that when calling unpack() with a string argument (format specifier s), its wise to put a maximum length count in front of it to prevent a buffer overrun, e.g.96s. Be wary when unpacking data you get over the networka malicious user might send badly-constructed packets in an effort to attack your system!
Whether you roll your own code or use someone elses, its a good idea to have a general set of data packing routines for the sake of keeping bugs in check, rather than packing each bit by hand each time.
When packing the data, whats a good format to use? Excellent question. Fortunately, RFC 450641, the External Data Representation Standard, already defines binary formats for a bunch of different types, like floating point types, integer types, arrays, raw data, etc. I suggest conforming to that if youre going to roll the data yourself. But youre not obligated to. The Packet Police are not right outside your door. At least, I dont think they are.
In any case, encoding the data somehow or another before you send it is the right way of doing things!

What does it really mean to encapsulate data, anyway? In the simplest case, it means youll stick a header on there with either some identifying information or a packet length, or both.
What should your header look like? Well, its just some binary data that represents whatever you feel is necessary to complete your project.
Wow. Thats vague.
Okay. For instance, lets say you have a multi-user chat program that uses SOCK_STREAMs. When a user types (says) something, two pieces of information need to be transmitted to the server: what was said and who said it.
So far so good? Whats the problem? youre asking.
The problem is that the messages can be of varying lengths. One person named tom might say, Hi, and another person named Benjamin might say, Hey guys what is up?
So you send() all this stuff to the clients as it comes in. Your outgoing data stream looks like this:
And so on. How does the client know when one message starts and another stops? You could, if you wanted, make all messages the same length and just call the sendall() we implemented, above. But that wastes bandwidth! We dont want to send() 1024 bytes just so tom can say Hi.
So we encapsulate the data in a tiny header and packet structure. Both the client and server know how to pack and unpack (sometimes referred to as marshal and unmarshal) this data. Dont look now, but were starting to define a protocol that describes how a client and server communicate!
In this case, lets assume the user name is a fixed length of 8 characters, padded with '\0'. And then lets assume the data is variable length, up to a maximum of 128 characters. Lets have a look a sample packet structure that we might use in this situation:
len (1 byte, unsigned)The total length of the packet, counting the 8-byte user name and chat data.
name (8 bytes)The users name, NUL-padded if necessary.
chatdata (n-bytes)The data itself, no more than 128 bytes. The length of the packet should be calculated as the length of this data plus 8 (the length of the name field, above).
Why did I choose the 8-byte and 128-byte limits for the fields? I pulled them out of the air, assuming theyd be long enough. Maybe, though, 8 bytes is too restrictive for your needs, and you can have a 30-byte name field, or whatever. The choice is up to you.
Using the above packet definition, the first packet would consist of the following information (in hex and ASCII):
And the second is similar:
(The length is stored in Network Byte Order, of course. In this case, its only one byte so it doesnt matter, but generally speaking youll want all your binary integers to be stored in Network Byte Order in your packets.)
When youre sending this data, you should be safe and use a command similar to sendall(), above, so you know all the data is sent, even if it takes multiple calls to send() to get it all out.
Likewise, when youre receiving this data, you need to do a bit of extra work. To be safe, you should assume that you might receive a partial packet (like maybe we receive 18 42 65 6E 6A from Benjamin, above, but thats all we get in this call to recv()). We need to call recv() over and over again until the packet is completely received.
But how? Well, we know the number of bytes we need to receive in total for the packet to be complete, since that number is tacked on the front of the packet. We also know the maximum packet size is 1+8+128, or 137 bytes (because thats how we defined the packet).
There are actually a couple things you can do here. Since you know every packet starts off with a length, you can call recv() just to get the packet length. Then once you have that, you can call it again specifying exactly the remaining length of the packet (possibly repeatedly to get all the data) until you have the complete packet. The advantage of this method is that you only need a buffer large enough for one packet, while the disadvantage is that you need to call recv() at least twice to get all the data.
Another option is just to call recv() and say the amount youre willing to receive is the maximum number of bytes in a packet. Then whatever you get, stick it onto the back of a buffer, and finally check to see if the packet is complete. Of course, you might get some of the next packet, so youll need to have room for that.
What you can do is declare an array big enough for two packets. This is your work array where you will reconstruct packets as they arrive.
Every time you recv() data, youll append it into the work buffer and check to see if the packet is complete. That is, the number of bytes in the buffer is greater than or equal to the length specified in the header (+1, because the length in the header doesnt include the byte for the length itself). If the number of bytes in the buffer is less than 1, the packet is not complete, obviously. You have to make a special case for this, though, since the first byte is garbage and you cant rely on it for the correct packet length.
Once the packet is complete, you can do with it what you will. Use it, and remove it from your work buffer.
Whew! Are you juggling that in your head yet? Well, heres the second of the one-two punch: you might have read past the end of one packet and onto the next in a single recv() call. That is, you have a work buffer with one complete packet, and an incomplete part of the next packet! Bloody heck. (But this is why you made your work buffer large enough to hold two packetsin case this happened!)
Since you know the length of the first packet from the header, and youve been keeping track of the number of bytes in the work buffer, you can subtract and calculate how many of the bytes in the work buffer belong to the second (incomplete) packet. When youve handled the first one, you can clear it out of the work buffer and move the partial second packet down the to front of the buffer so its all ready to go for the next recv().
(Some of you readers will note that actually moving the partial second packet to the beginning of the work buffer takes time, and the program can be coded to not require this by using a circular buffer. Unfortunately for the rest of you, a discussion on circular buffers is beyond the scope of this article. If youre still curious, grab a data structures book and go from there.)
I never said it was easy. Ok, I did say it was easy. And it is; you just need practice and pretty soon itll come to you naturally. By Excalibur I swear it!
So far, this guide has talked about sending data from one host to one other host. But it is possible, I insist, that you can, with the proper authority, send data to multiple hosts at the same time!
With UDP (only UDP, not TCP) and standard IPv4, this is done through a mechanism called broadcasting. With IPv6, broadcasting isnt supported, and you have to resort to the often superior technique of multicasting, which, sadly I wont be discussing at this time. But enough of the starry-eyed futurewere stuck in the 32-bit present.
But wait! You cant just run off and start broadcasting willy-nilly; You have to set the socket option SO_BROADCAST before you can send a broadcast packet out on the network. Its like a one of those little plastic covers they put over the missile launch switch! Thats just how much power you hold in your hands!
But seriously, though, there is a danger to using broadcast packets, and that is: every system that receives a broadcast packet must undo all the onion-skin layers of data encapsulation until it finds out what port the data is destined to. And then it hands the data over or discards it. In either case, its a lot of work for each machine that receives the broadcast packet, and since it is all of them on the local network, that could be a lot of machines doing a lot of unnecessary work. When the game Doom first came out, this was a complaint about its network code.
Now, there is more than one way to skin a cat wait a minute. Is there really more than one way to skin a cat? What kind of expression is that? Uh, and likewise, there is more than one way to send a broadcast packet. So, to get to the meat and potatoes of the whole thing: how do you specify the destination address for a broadcast message? There are two common ways:
Send the data to a specific subnets broadcast address. This is the subnets network number with all one-bits set for the host portion of the address. For instance, at home my network is 192.168.1.0, my netmask is 255.255.255.0, so the last byte of the address is my host number (because the first three bytes, according to the netmask, are the network number). So my broadcast address is 192.168.1.255. Under Unix, the ifconfig command will actually give you all this data. (If youre curious, the bitwise logic to get your broadcast address is network_number OR (NOT netmask).) You can send this type of broadcast packet to remote networks as well as your local network, but you run the risk of the packet being dropped by the destinations router. (If they didnt drop it, then some random smurf could start flooding their LAN with broadcast traffic.)
Send the data to the global broadcast address. This is 255.255.255.255, aka INADDR_BROADCAST. Many machines will automatically bitwise AND this with your network number to convert it to a network broadcast address, but some wont. It varies. Routers do not forward this type of broadcast packet off your local network, ironically enough.
So what happens if you try to send data on the broadcast address without first setting the SO_BROADCAST socket option? Well, lets fire up good old talker and listener and see what happens.
Yes, its not happy at allbecause we didnt set the SO_BROADCAST socket option. Do that, and now you can sendto() anywhere you want!
In fact, thats the only difference between a UDP application that can broadcast and one that cant. So lets take the old talker application and add one section that sets the SO_BROADCAST socket option. Well call this program broadcaster.c42:
Whats different between this and a normal UDP client/server situation? Nothing! (With the exception of the client being allowed to send broadcast packets in this case.) As such, go ahead and run the old UDP listener program in one window, and broadcaster in another. You should be now be able to do all those sends that failed, above.
And you should see listener responding that it got the packets. (If listener doesnt respond, it could be because its bound to an IPv6 address. Try changing the AF_INET6 in listener.c to AF_INET to force IPv4.)
Well, thats kind of exciting. But now fire up listener on another machine next to you on the same network so that you have two copies going, one on each machine, and run broadcaster again with your broadcast address Hey! Both listeners get the packet even though you only called sendto() once! Cool!
If the listener gets data you send directly to it, but not data on the broadcast address, it could be that you have a firewall on your local machine that is blocking the packets. (Yes, Pat and Bapper, thank you for realizing before I did that this is why my sample code wasnt working. I told you Id mention you in the guide, and here you are. So nyah.)
Again, be careful with broadcast packets. Since every machine on the LAN will be forced to deal with the packet whether it recvfrom()s it or not, it can present quite a load to the entire computing network. They are definitely to be used sparingly and appropriately.
Where can I get those header files?
 If you dont have them on your system already, you probably dont need them. Check the manual for your particular platform. If youre building for Windows, you only need to #include <winsock.h>.
What do I do when bind() reports Address already in use?
You have to use setsockopt() with the SO_REUSEADDR option on the listening socket. Check out the section on bind() and the section on select() for an example.
How do I get a list of open sockets on the system?
Use the netstat. Check the man page for full details, but you should get some good output just typing:
The only trick is determining which socket is associated with which program. :-)
How can I view the routing table?
Run the route command (in /sbin on most Linuxes) or the command netstat -r. Or the command ip route.
How can I run the client and server programs if I only have one computer? Dont I need a network to write network programs?
Fortunately for you, virtually all machines implement a loopback network device that sits in the kernel and pretends to be a network card. (This is the interface listed as lo in the routing table.)
Pretend youre logged into a machine named goat. Run the client in one window and the server in another. Or start the server in the background (server &) and run the client in the same window. The upshot of the loopback device is that you can either client goat or client localhost (since localhost is likely defined in your /etc/hosts file) and youll have the client talking to the server without a network!
In short, no changes are necessary to any of the code to make it run on a single non-networked machine! Huzzah!
How can I tell if the remote side has closed connection?
You can tell because recv() will return 0.
How do I implement a ping utility? What is ICMP? Where can I find out more about raw sockets and SOCK_RAW?

All your raw sockets questions will be answered in W. Richard Stevens UNIX Network Programming books. Also, look in the ping/ subdirectory in Stevens UNIX Network Programming source code, available online43.
How do I change or shorten the timeout on a call to connect()?
Instead of giving you exactly the same answer that W. Richard Stevens would give you, Ill just refer you to lib/connect_nonb.c in the UNIX Network Programming source code44.
The gist of it is that you make a socket descriptor with socket(), set it to non-blocking, call connect(), and if all goes well connect() will return -1 immediately and errno will be set to EINPROGRESS. Then you call select() with whatever timeout you want, passing the socket descriptor in both the read and write sets. If it doesnt timeout, it means the connect() call completed. At this point, youll have to use getsockopt() with the SO_ERROR option to get the return value from the connect() call, which should be zero if there was no error.
Finally, youll probably want to set the socket back to be blocking again before you start transferring data over it.
Notice that this has the added benefit of allowing your program to do something else while its connecting, too. You could, for example, set the timeout to something low, like 500 ms, and update an indicator onscreen each timeout, then call select() again. When youve called select() and timed-out, say, 20 times, youll know its time to give up on the connection.
Like I said, check out Stevens source for a perfectly excellent example.
How do I build for Windows?
First, delete Windows and install Linux or BSD. };-). No, actually, just see the section on building for Windows in the introduction.
How do I build for Solaris/SunOS? I keep getting linker errors when I try to compile!
The linker errors happen because Sun boxes dont automatically compile in the socket libraries. See the section on building for Solaris/SunOS in the introduction for an example of how to do this.
Why does select() keep falling out on a signal?
Signals tend to cause blocked system calls to return -1 with errno set to EINTR. When you set up a signal handler with sigaction(), you can set the flag SA_RESTART, which is supposed to restart the system call after it was interrupted.
Naturally, this doesnt always work.
My favorite solution to this involves a goto statement. You know this irritates your professors to no end, so go for it!
Sure, you dont need to use goto in this case; you can use other structures to control it. But I think the goto statement is actually cleaner.
How can I implement a timeout on a call to recv()?
 Use select()! It allows you to specify a timeout parameter for socket descriptors that youre looking to read from. Or, you could wrap the entire functionality in a single function, like this:
Notice that recvtimeout() returns -2 in case of a timeout. Why not return 0? Well, if you recall, a return value of 0 on a call to recv() means that the remote side closed the connection. So that return value is already spoken for, and -1 means error, so I chose -2 as my timeout indicator.
How do I encrypt or compress the data before sending it through the socket?
One easy way to do encryption is to use SSL (secure sockets layer), but thats beyond the scope of this guide. (Check out the OpenSSL project45 for more info.)
But assuming you want to plug in or implement your own compressor or encryption system, its just a matter of thinking of your data as running through a sequence of steps between both ends. Each step changes the data in some way.
Now the other way around:
If youre going to compress and encrypt, just remember to compress first. :-)
Just as long as the client properly undoes what the server does, the data will be fine in the end no matter how many intermediate steps you add.
So all you need to do to use my code is to find the place between where the data is read and the data is sent (using send()) over the network, and stick some code in there that does the encryption.
What is this PF_INET I keep seeing? Is it related to AF_INET?
 
Yes, yes it is. See the section on socket() for details.
How can I write a server that accepts shell commands from a client and executes them?
For simplicity, lets say the client connect()s, send()s, and close()s the connection (that is, there are no subsequent system calls without the client connecting again).
The process the client follows is this:
Meanwhile, the server is handling the data and executing it:
 Beware! Having the server execute what the client says is like giving remote shell access and people can do things to your account when they connect to the server. For instance, in the above example, what if the client sends rm -rf ~? It deletes everything in your account, thats what!
So you get wise, and you prevent the client from using any except for a couple utilities that you know are safe, like the foobar utility:
But youre still unsafe, unfortunately: what if the client enters foobar; rm -rf ~? The safest thing to do is to write a little routine that puts an escape (\) character in front of all non-alphanumeric characters (including spaces, if appropriate) in the arguments for the command.
As you can see, security is a pretty big issue when the server starts executing things the client sends.
Im sending a slew of data, but when I recv(), it only receives 536 bytes or 1460 bytes at a time. But if I run it on my local machine, it receives all the data at the same time. Whats going on?
Youre hitting the MTUthe maximum size the physical medium can handle. On the local machine, youre using the loopback device which can handle 8K or more no problem. But on Ethernet, which can only handle 1500 bytes with a header, you hit that limit. Over a modem, with 576 MTU (again, with header), you hit the even lower limit.
You have to make sure all the data is being sent, first of all. (See the sendall() function implementation for details.) Once youre sure of that, then you need to call recv() in a loop until all your data is read.
Read the section Son of Data Encapsulation for details on receiving complete packets of data using multiple calls to recv().
Im on a Windows box and I dont have the fork() system call or any kind of struct sigaction. What to do?
 If theyre anywhere, theyll be in POSIX libraries that may have shipped with your compiler. Since I dont have a Windows box, I really cant tell you the answer, but I seem to remember that Microsoft has a POSIX compatibility layer and thats where fork() would be. (And maybe even sigaction.)
Search the help that came with VC++ for fork or POSIX and see if it gives you any clues.
If that doesnt work at all, ditch the fork()/sigaction stuff and replace it with the Win32 equivalent: CreateProcess(). I dont know how to use CreateProcess()it takes a bazillion arguments, but it should be covered in the docs that came with VC++.
 Im behind a firewallhow do I let people outside the firewall know my IP address so they can connect to my machine?
Unfortunately, the purpose of a firewall is to prevent people outside the firewall from connecting to machines inside the firewall, so allowing them to do so is basically considered a breach of security.
This isnt to say that all is lost. For one thing, you can still often connect() through the firewall if its doing some kind of masquerading or NAT or something like that. Just design your programs so that youre always the one initiating the connection, and youll be fine.
 If thats not satisfactory, you can ask your sysadmins to poke a hole in the firewall so that people can connect to you. The firewall can forward to you either through its NAT software, or through a proxy or something like that.
Be aware that a hole in the firewall is nothing to be taken lightly. You have to make sure you dont give bad people access to the internal network; if youre a beginner, its a lot harder to make software secure than you might imagine.
Dont make your sysadmin mad at me. ;-)
 How do I write a packet sniffer? How do I put my Ethernet interface into promiscuous mode?
For those not in the know, when a network card is in promiscuous mode, it will forward ALL packets to the operating system, not just those that were addressed to this particular machine. (Were talking Ethernet-layer addresses here, not IP addressesbut since ethernet is lower-layer than IP, all IP addresses are effectively forwarded as well. See the section Low Level Nonsense and Network Theory for more info.)
This is the basis for how a packet sniffer works. It puts the interface into promiscuous mode, then the OS gets every single packet that goes by on the wire. Youll have a socket of some type that you can read this data from.
Unfortunately, the answer to the question varies depending on the platform, but if you Google for, for instance, windows promiscuous ioctl youll probably get somewhere. For Linux, theres what looks like a useful Stack Overflow thread46, as well.
How can I set a custom timeout value for a TCP or UDP socket?
It depends on your system. You might search the net for SO_RCVTIMEO and SO_SNDTIMEO (for use with setsockopt()) to see if your system supports such functionality.
The Linux man page suggests using alarm() or setitimer() as a substitute.
How can I tell which ports are available to use? Is there a list of official port numbers?
Usually this isnt an issue. If youre writing, say, a web server, then its a good idea to use the well-known port 80 for your software. If youre writing just your own specialized server, then choose a port at random (but greater than 1023) and give it a try.
If the port is already in use, youll get an Address already in use error when you try to bind(). Choose another port. (Its a good idea to allow the user of your software to specify an alternate port either with a config file or a command line switch.)
There is a list of official port numbers47 maintained by the Internet Assigned Numbers Authority (IANA). Just because something (over 1023) is in that list doesnt mean you cant use the port. For instance, Id Softwares DOOM uses the same port as mdqs, whatever that is. All that matters is that no one else on the same machine is using that port when you want to use it.

In the Unix world, there are a lot of manuals. They have little sections that describe individual functions that you have at your disposal.
Of course, manual would be too much of a thing to type. I mean, no one in the Unix world, including myself, likes to type that much. Indeed I could go on and on at great length about how much I prefer to be terse but instead I shall be brief and not bore you with long-winded diatribes about how utterly amazingly brief I prefer to be in virtually all circumstances in their entirety.
[Applause]
Thank you. What I am getting at is that these pages are called man pages in the Unix world, and I have included my own personal truncated variant here for your reading enjoyment. The thing is, many of these functions are way more general purpose than Im letting on, but Im only going to present the parts that are relevant for Internet Sockets Programming.
But wait! Thats not all thats wrong with my man pages:
If you want the real information, check your local Unix man pages by typing man whatever, where whatever is something that youre incredibly interested in, such as accept. (Im sure Microsoft Visual Studio has something similar in their help section. But man is better because it is one byte more concise than help. Unix wins again!)
So, if these are so flawed, why even include them at all in the Guide? Well, there are a few reasons, but the best are that (a) these versions are geared specifically toward network programming and are easier to digest than the real ones, and (b) these versions contain examples!
Oh! And speaking of the examples, I dont tend to put in all the error checking because it really increases the length of the code. But you should absolutely do error checking pretty much any time you make any of the system calls unless youre totally 100% sure its not going to fail, and you should probably do it even then!


Accept an incoming connection on a listening socket
Once youve gone through the trouble of getting a SOCK_STREAM socket and setting it up for incoming connections with listen(), then you call accept() to actually get yourself a new socket descriptor to use for subsequent communication with the newly connected client.
The old socket that you are using for listening is still there, and will be used for further accept() calls as they come in.
accept() will normally block, and you can use select() to peek on the listening socket descriptor ahead of time to see if its ready to read. If so, then theres a new connection waiting to be accept()ed! Yay! Alternatively, you could set the O_NONBLOCK flag on the listening socket using fcntl(), and then it will never block, choosing instead to return -1 with errno set to EWOULDBLOCK.
The socket descriptor returned by accept() is a bona fide socket descriptor, open and connected to the remote host. You have to close() it when youre done with it.
accept() returns the newly connected socket descriptor, or -1 on error, with errno set appropriately.
socket(), getaddrinfo(), listen(), struct sockaddr_in

Associate a socket with an IP address and port number
When a remote machine wants to connect to your server program, it needs two pieces of information: the IP address and the port number. The bind() call allows you to do just that.
First, you call getaddrinfo() to load up a struct sockaddr with the destination address and port information. Then you call socket() to get a socket descriptor, and then you pass the socket and address into bind(), and the IP address and port are magically (using actual magic) bound to the socket!
If you dont know your IP address, or you know you only have one IP address on the machine, or you dont care which of the machines IP addresses is used, you can simply pass the AI_PASSIVE flag in the hints parameter to getaddrinfo(). What this does is fill in the IP address part of the struct sockaddr with a special value that tells bind() that it should automatically fill in this hosts IP address.
What what? What special value is loaded into the struct sockaddrs IP address to cause it to auto-fill the address with the current host? Ill tell you, but keep in mind this is only if youre filling out the struct sockaddr by hand; if not, use the results from getaddrinfo(), as per above. In IPv4, the sin_addr.s_addr field of the struct sockaddr_in structure is set to INADDR_ANY. In IPv6, the sin6_addr field of the struct sockaddr_in6 structure is assigned into from the global variable in6addr_any. Or, if youre declaring a new struct in6_addr, you can initialize it to IN6ADDR_ANY_INIT.
Lastly, the addrlen parameter should be set to sizeof my_addr.
Returns zero on success, or -1 on error (and errno will be set accordingly).
getaddrinfo(), socket(), struct sockaddr_in, struct in_addr

Connect a socket to a server
Once youve built a socket descriptor with the socket() call, you can connect() that socket to a remote server using the well-named connect() system call. All you need to do is pass it the socket descriptor and the address of the server youre interested in getting to know better. (Oh, and the length of the address, which is commonly passed to functions like this.)
Usually this information comes along as the result of a call to getaddrinfo(), but you can fill out your own struct sockaddr if you want to.
If you havent yet called bind() on the socket descriptor, it is automatically bound to your IP address and a random local port. This is usually just fine with you if youre not a server, since you really dont care what your local port is; you only care what the remote port is so you can put it in the serv_addr parameter. You can call bind() if you really want your client socket to be on a specific IP address and port, but this is pretty rare.
Once the socket is connect()ed, youre free to send() and recv() data on it to your hearts content.
 Special note: if you connect() a SOCK_DGRAM UDP socket to a remote host, you can use send() and recv() as well as sendto() and recvfrom(). If you want.
Returns zero on success, or -1 on error (and errno will be set accordingly).
socket(), bind()

Close a socket descriptor
After youve finished using the socket for whatever demented scheme you have concocted and you dont want to send() or recv() or, indeed, do anything else at all with the socket, you can close() it, and itll be freed up, never to be used again.
The remote side can tell if this happens one of two ways. One: if the remote side calls recv(), it will return 0. Two: if the remote side calls send(), itll receive a signal SIGPIPE and send() will return -1 and errno will be set to EPIPE.
 Windows users: the function you need to use is called closesocket(), not close(). If you try to use close() on a socket descriptor, its possible Windows will get angry And you wouldnt like it when its angry.
Returns zero on success, or -1 on error (and errno will be set accordingly).
socket(), shutdown()
 
Get information about a host name and/or service and load up a struct sockaddr with the result.
getaddrinfo() is an excellent function that will return information on a particular host name (such as its IP address) and load up a struct sockaddr for you, taking care of the gritty details (like if its IPv4 or IPv6). It replaces the old functions gethostbyname() and getservbyname().The description, below, contains a lot of information that might be a little daunting, but actual usage is pretty simple. It might be worth it to check out the examples first.
The host name that youre interested in goes in the nodename parameter. The address can be either a host name, like www.example.com, or an IPv4 or IPv6 address (passed as a string). This parameter can also be NULL if youre using the AI_PASSIVE flag (see below).
The servname parameter is basically the port number. It can be a port number (passed as a string, like 80), or it can be a service name, like http or tftp or smtp or pop, etc. Well-known service names can be found in the IANA Port List48 or in your /etc/services file.
Lastly, for input parameters, we have hints. This is really where you get to define what the getaddrinfo() function is going to do. Zero the whole structure before use with memset(). Lets take a look at the fields you need to set up before use.
The ai_flags can be set to a variety of things, but here are a couple important ones. (Multiple flags can be specified by bitwise-ORing them together with the | operator). Check your man page for the complete list of flags.
AI_CANONNAME causes the ai_canonname of the result to the filled out with the hosts canonical (real) name. AI_PASSIVE causes the results IP address to be filled out with INADDR_ANY (IPv4) or in6addr_any (IPv6); this causes a subsequent call to bind() to auto-fill the IP address of the struct sockaddr with the address of the current host. Thats excellent for setting up a server when you dont want to hardcode the address.
If you do use the AI_PASSIVE, flag, then you can pass NULL in the nodename (since bind() will fill it in for you later).
Continuing on with the input parameters, youll likely want to set ai_family to AF_UNSPEC which tells getaddrinfo() to look for both IPv4 and IPv6 addresses. You can also restrict yourself to one or the other with AF_INET or AF_INET6.
Next, the socktype field should be set to SOCK_STREAM or SOCK_DGRAM, depending on which type of socket you want.
Finally, just leave ai_protocol at 0 to automatically choose your protocol type.
Now, after you get all that stuff in there, you can finally make the call to getaddrinfo()!
Of course, this is where the fun begins. The res will now point to a linked list of struct addrinfos, and you can go through this list to get all the addresses that match what you passed in with the hints.
Now, its possible to get some addresses that dont work for one reason or another, so what the Linux man page does is loops through the list doing a call to socket() and connect() (or bind() if youre setting up a server with the AI_PASSIVE flag) until it succeeds.
Finally, when youre done with the linked list, you need to call freeaddrinfo() to free up the memory (or it will be leaked, and Some People will get upset).
Returns zero on success, or nonzero on error. If it returns nonzero, you can use the function gai_strerror() to get a printable version of the error code in the return value.
gethostbyname(), getnameinfo()

Returns the name of the system
Your system has a name. They all do. This is a slightly more Unixy thing than the rest of the networky stuff weve been talking about, but it still has its uses.
For instance, you can get your host name, and then call gethostbyname() to find out your IP address.
The parameter name should point to a buffer that will hold the host name, and len is the size of that buffer in bytes. gethostname() wont overwrite the end of the buffer (it might return an error, or it might just stop writing), and it will NUL-terminate the string if theres room for it in the buffer.
Returns zero on success, or -1 on error (and errno will be set accordingly).
gethostbyname()
 
Get an IP address for a hostname, or vice-versa
PLEASE NOTE: these two functions are superseded by getaddrinfo() and getnameinfo()! In particular, gethostbyname() doesnt work well with IPv6.
These functions map back and forth between host names and IP addresses. For instance, if you have www.example.com, you can use gethostbyname() to get its IP address and store it in a struct in_addr.
Conversely, if you have a struct in_addr or a struct in6_addr, you can use gethostbyaddr() to get the hostname back. gethostbyaddr() is IPv6 compatible, but you should use the newer shinier getnameinfo() instead.
(If you have a string containing an IP address in dots-and-numbers format that you want to look up the hostname of, youd be better off using getaddrinfo() with the AI_CANONNAME flag.)
gethostbyname() takes a string like www.yahoo.com, and returns a struct hostent which contains tons of information, including the IP address. (Other information is the official host name, a list of aliases, the address type, the length of the addresses, and the list of addressesits a general-purpose structure thats pretty easy to use for our specific purposes once you see how.)
gethostbyaddr() takes a struct in_addr or struct in6_addr and brings you up a corresponding host name (if there is one), so its sort of the reverse of gethostbyname(). As for parameters, even though addr is a char*, you actually want to pass in a pointer to a struct in_addr. len should be sizeof(struct in_addr), and type should be AF_INET.
So what is this struct hostent that gets returned? It has a number of fields that contain information about the host in question.
Returns a pointer to a resultant struct hostent on success, or NULL on error.
Instead of the normal perror() and all that stuff youd normally use for error reporting, these functions have parallel results in the variable h_errno, which can be printed using the functions herror() or hstrerror(). These work just like the classic errno, perror(), and strerror() functions youre used to.
getaddrinfo(), getnameinfo(), gethostname(), errno, perror(), strerror(), struct in_addr

Look up the host name and service name information for a given struct sockaddr.
This function is the opposite of getaddrinfo(), that is, this function takes an already loaded struct sockaddr and does a name and service name lookup on it. It replaces the old gethostbyaddr() and getservbyport() functions.
You have to pass in a pointer to a struct sockaddr (which in actuality is probably a struct sockaddr_in or struct sockaddr_in6 that youve cast) in the sa parameter, and the length of that struct in the salen.
The resultant host name and service name will be written to the area pointed to by the host and serv parameters. Of course, you have to specify the max lengths of these buffers in hostlen and servlen.
Finally, there are several flags you can pass, but here a a couple good ones. NI_NOFQDN will cause the host to only contain the host name, not the whole domain name. NI_NAMEREQD will cause the function to fail if the name cannot be found with a DNS lookup (if you dont specify this flag and the name cant be found, getnameinfo() will put a string version of the IP address in host instead).
As always, check your local man pages for the full scoop.
Returns zero on success, or non-zero on error. If the return value is non-zero, it can be passed to gai_strerror() to get a human-readable string. See getaddrinfo for more information.
getaddrinfo(), gethostbyaddr()

Return address info about the remote side of the connection
Once you have either accept()ed a remote connection, or connect()ed to a server, you now have what is known as a peer. Your peer is simply the computer youre connected to, identified by an IP address and a port. So
getpeername() simply returns a struct sockaddr_in filled with information about the machine youre connected to.
Why is it called a name? Well, there are a lot of different kinds of sockets, not just Internet Sockets like were using in this guide, and so name was a nice generic term that covered all cases. In our case, though, the peers name is its IP address and port.
Although the function returns the size of the resultant address in len, you must preload len with the size of addr.
Returns zero on success, or -1 on error (and errno will be set accordingly).
gethostname(), gethostbyname(), gethostbyaddr()

Holds the error code for the last system call
This is the variable that holds error information for a lot of system calls. If youll recall, things like socket() and listen() return -1 on error, and they set the exact value of errno to let you know specifically which error occurred.
The header file errno.h lists a bunch of constant symbolic names for errors, such as EADDRINUSE, EPIPE, ECONNREFUSED, etc. Your local man pages will tell you what codes can be returned as an error, and you can use these at run time to handle different errors in different ways.
Or, more commonly, you can call perror() or strerror() to get a human-readable version of the error.
One thing to note, for you multithreading enthusiasts, is that on most systems errno is defined in a threadsafe manner. (That is, its not actually a global variable, but it behaves just like a global variable would in a single-threaded environment.)
The value of the variable is the latest error to have transpired, which might be the code for success if the last action succeeded.
perror(), strerror()

Control socket descriptors
This function is typically used to do file locking and other file-oriented stuff, but it also has a couple socket-related functions that you might see or use from time to time.
Parameter s is the socket descriptor you wish to operate on, cmd should be set to F_SETFL, and arg can be one of the following commands. (Like I said, theres more to fcntl() than Im letting on here, but Im trying to stay socket-oriented.)
Returns zero on success, or -1 on error (and errno will be set accordingly).
Different uses of the fcntl() system call actually have different return values, but I havent covered them here because theyre not socket-related. See your local fcntl() man page for more information.
Blocking, send()
 
Convert multi-byte integer types from host byte order to network byte order
Just to make you really unhappy, different computers use different byte orderings internally for their multibyte integers (i.e.any integer thats larger than a char). The upshot of this is that if you send() a two-byte short int from an Intel box to a Mac (before they became Intel boxes, too, I mean), what one computer thinks is the number 1, the other will think is the number 256, and vice-versa.
 The way to get around this problem is for everyone to put aside their differences and agree that Motorola and IBM had it right, and Intel did it the weird way, and so we all convert our byte orderings to big-endian before sending them out. Since Intel is a little-endian machine, its far more politically correct to call our preferred byte ordering Network Byte Order. So these functions convert from your native byte order to network byte order and back again.
(This means on Intel these functions swap all the bytes around, and on PowerPC they do nothing because the bytes are already in Network Byte Order. But you should always use them in your code anyway, since someone might want to build it on an Intel machine and still have things work properly.)
Note that the types involved are 32-bit (4 byte, probably int) and 16-bit (2 byte, very likely short) numbers. 64-bit machines might have a htonll() for 64-bit ints, but Ive not seen it. Youll just have to write your own.
Anyway, the way these functions work is that you first decide if youre converting from host (your machines) byte order or from network byte order. If host, the the first letter of the function youre going to call is h. Otherwise its n for network. The middle of the function name is always to because youre converting from one to another, and the penultimate letter shows what youre converting to. The last letter is the size of the data, s for short, or l for long. Thus:
Each function returns the converted value.
 
Convert IP addresses from a dots-and-number string to a struct in_addr and back
These functions are deprecated because they dont handle IPv6! Use (inet_ntop())[#inet_ntopman] or (inet_pton())[#inet_ntopman] instead! They are included here because they can still be found in the wild.
All of these functions convert from a struct in_addr (part of your struct sockaddr_in, most likely) to a string in dots-and-numbers format (e.g.192.168.5.10) and vice-versa. If you have an IP address passed on the command line or something, this is the easiest way to get a struct in_addr to connect() to, or whatever. If you need more power, try some of the DNS functions like gethostbyname() or attempt a coup dtat in your local country.
The function inet_ntoa() converts a network address in a struct in_addr to a dots-and-numbers format string. The n in ntoa stands for network, and the a stands for ASCII for historical reasons (so its Network To ASCIIthe toa suffix has an analogous friend in the C library called atoi() which converts an ASCII string to an integer).
The function inet_aton() is the opposite, converting from a dots-and-numbers string into a in_addr_t (which is the type of the field s_addr in your struct in_addr).
Finally, the function inet_addr() is an older function that does basically the same thing as inet_aton(). Its theoretically deprecated, but youll see it a lot and the police wont come get you if you use it.
inet_aton() returns non-zero if the address is a valid one, and it returns zero if the address is invalid.
inet_ntoa() returns the dots-and-numbers string in a static buffer that is overwritten with each call to the function.
inet_addr() returns the address as an in_addr_t, or -1 if theres an error. (That is the same result as if you tried to convert the string 255.255.255.255, which is a valid IP address. This is why inet_aton() is better.)
inet_ntop(), inet_pton(), gethostbyname(), gethostbyaddr()
 
Convert IP addresses to human-readable form and back.
These functions are for dealing with human-readable IP addresses and converting them to their binary representation for use with various functions and system calls. The n stands for network, and p for presentation. Or text presentation. But you can think of it as printable. ntop is network to printable. See?
Sometimes you dont want to look at a pile of binary numbers when looking at an IP address. You want it in a nice printable form, like 192.0.2.180, or 2001:db8:8714:3a90::12. In that case, inet_ntop() is for you.
inet_ntop() takes the address family in the af parameter (either AF_INET or AF_INET6). The src parameter should be a pointer to either a struct in_addr or struct in6_addr containing the address you wish to convert to a string. Finally dst and size are the pointer to the destination string and the maximum length of that string.
What should the maximum length of the dst string be? What is the maximum length for IPv4 and IPv6 addresses? Fortunately there are a couple of macros to help you out. The maximum lengths are: INET_ADDRSTRLEN and INET6_ADDRSTRLEN.
Other times, you might have a string containing an IP address in readable form, and you want to pack it into a struct sockaddr_in or a struct sockaddr_in6. In that case, the opposite function inet_pton() is what youre after.
inet_pton() also takes an address family (either AF_INET or AF_INET6) in the af parameter. The src parameter is a pointer to a string containing the IP address in printable form. Lastly the dst parameter points to where the result should be stored, which is probably a struct in_addr or struct in6_addr.
These functions dont do DNS lookupsyoull need getaddrinfo() for that.
inet_ntop() returns the dst parameter on success, or NULL on failure (and errno is set).
inet_pton() returns 1 on success. It returns -1 if there was an error (errno is set), or 0 if the input isnt a valid IP address.
getaddrinfo()

Tell a socket to listen for incoming connections
You can take your socket descriptor (made with the socket() system call) and tell it to listen for incoming connections. This is what differentiates the servers from the clients, guys.
The backlog parameter can mean a couple different things depending on the system you on, but loosely it is how many pending connections you can have before the kernel starts rejecting new ones. So as the new connections come in, you should be quick to accept() them so that the backlog doesnt fill. Try setting it to 10 or so, and if your clients start getting Connection refused under heavy load, set it higher.
Before calling listen(), your server should call bind() to attach itself to a specific port number. That port number (on the servers IP address) will be the one that clients connect to.
Returns zero on success, or -1 on error (and errno will be set accordingly).
accept(), bind(), socket()
 
Print an error as a human-readable string
Since so many functions return -1 on error and set the value of the variable errno to be some number, it would sure be nice if you could easily print that in a form that made sense to you.
Mercifully, perror() does that. If you want more description to be printed before the error, you can point the parameter s to it (or you can leave s as NULL and nothing additional will be printed).
In a nutshell, this function takes errno values, like ECONNRESET, and prints them nicely, like Connection reset by peer.
The function strerror() is very similar to perror(), except it returns a pointer to the error message string for a given value (you usually pass in the variable errno).
strerror() returns a pointer to the error message string.
errno

Test for events on multiple sockets simultaneously
This function is very similar to select() in that they both watch sets of file descriptors for events, such as incoming data ready to recv(), socket ready to send() data to, out-of-band data ready to recv(), errors, etc.
The basic idea is that you pass an array of nfds struct pollfds in ufds, along with a timeout in milliseconds (1000 milliseconds in a second). The timeout can be negative if you want to wait forever. If no event happens on any of the socket descriptors by the timeout, poll() will return.
Each element in the array of struct pollfds represents one socket descriptor, and contains the following fields:

Before calling poll(), load fd with the socket descriptor (if you set fd to a negative number, this struct pollfd is ignored and its revents field is set to zero) and then construct the events field by bitwise-ORing the following macros:
Once the poll() call returns, the revents field will be constructed as a bitwise-OR of the above fields, telling you which descriptors actually have had that event occur. Additionally, these other fields might be present:
Returns the number of elements in the ufds array that have had event occur on them; this can be zero if the timeout occurred. Also returns -1 on error (and errno will be set accordingly).
select()
 
Receive data on a socket
Once you have a socket up and connected, you can read incoming data from the remote side using the recv() (for TCP SOCK_STREAM sockets) and recvfrom() (for UDP SOCK_DGRAM sockets).
Both functions take the socket descriptor s, a pointer to the buffer buf, the size (in bytes) of the buffer len, and a set of flags that control how the functions work.
Additionally, the recvfrom() takes a struct sockaddr*, from that will tell you where the data came from, and will fill in fromlen with the size of struct sockaddr. (You must also initialize fromlen to be the size of from or struct sockaddr.)
So what wondrous flags can you pass into this function? Here are some of them, but you should check your local man pages for more information and what is actually supported on your system. You bitwise-or these together, or just set flags to 0 if you want it to be a regular vanilla recv().
When you call recv(), it will block until there is some data to read. If you want to not block, set the socket to non-blocking or check with select() or poll() to see if there is incoming data before calling recv() or recvfrom().
Returns the number of bytes actually received (which might be less than you requested in the len parameter), or -1 on error (and errno will be set accordingly).
If the remote side has closed the connection, recv() will return 0. This is the normal method for determining if the remote side has closed the connection. Normality is good, rebel!
send(), sendto(), select(), poll(), Blocking

Check if sockets descriptors are ready to read/write
The select() function gives you a way to simultaneously check multiple sockets to see if they have data waiting to be recv()d, or if you can send() data to them without blocking, or if some exception has occurred.
You populate your sets of socket descriptors using the macros, like FD_SET(), above. Once you have the set, you pass it into the function as one of the following parameters: readfds if you want to know when any of the sockets in the set is ready to recv() data, writefds if any of the sockets is ready to send() data to, and/or exceptfds if you need to know when an exception (error) occurs on any of the sockets. Any or all of these parameters can be NULL if youre not interested in those types of events. After select() returns, the values in the sets will be changed to show which are ready for reading or writing, and which have exceptions.
The first parameter, n is the highest-numbered socket descriptor (theyre just ints, remember?) plus one.
Lastly, the struct timeval, timeout, at the endthis lets you tell select() how long to check these sets for. Itll return after the timeout, or when an event occurs, whichever is first. The struct timeval has two fields: tv_sec is the number of seconds, to which is added tv_usec, the number of microseconds (1,000,000 microseconds in a second).
The helper macros do the following:
Note for Linux users: Linuxs select() can return ready-to-read and then not actually be ready to read, thus causing the subsequent read() call to block. You can work around this bug by setting O_NONBLOCK flag on the receiving socket so it errors with EWOULDBLOCK, then ignoring this error if it occurs. See the fcntl() man page for more info on setting a socket to non-blocking.
Returns the number of descriptors in the set on success, 0 if the timeout was reached, or -1 on error (and errno will be set accordingly). Also, the sets are modified to show which sockets are ready.
poll()
 
Set various options for a socket
Sockets are fairly configurable beasts. In fact, they are so configurable, Im not even going to cover it all here. Its probably system-dependent anyway. But I will talk about the basics.
Obviously, these functions get and set certain options on a socket. On a Linux box, all the socket information is in the man page for socket in section 7. (Type: man 7 socket to get all these goodies.)
As for parameters, s is the socket youre talking about, level should be set to SOL_SOCKET. Then you set the optname to the name youre interested in. Again, see your man page for all the options, but here are some of the most fun ones:
As for the parameter optval, its usually a pointer to an int indicating the value in question. For booleans, zero is false, and non-zero is true. And thats an absolute fact, unless its different on your system. If there is no parameter to be passed, optval can be NULL.
The final parameter, optlen, should be set to the length of optval, probably sizeof(int), but varies depending on the option. Note that in the case of getsockopt(), this is a pointer to a socklen_t, and it specifies the maximum size object that will be stored in optval (to prevent buffer overflows). And getsockopt() will modify the value of optlen to reflect the number of bytes actually set.
Warning: on some systems (notably Sun and Windows), the option can be a char instead of an int, and is set to, for example, a character value of '1' instead of an int value of 1. Again, check your own man pages for more info with man setsockopt and man 7 socket!
Returns zero on success, or -1 on error (and errno will be set accordingly).
fcntl()
 
Send data out over a socket
These functions send data to a socket. Generally speaking, send() is used for TCP SOCK_STREAM connected sockets, and sendto() is used for UDP SOCK_DGRAM unconnected datagram sockets. With the unconnected sockets, you must specify the destination of a packet each time you send one, and thats why the last parameters of sendto() define where the packet is going.
With both send() and sendto(), the parameter s is the socket, buf is a pointer to the data you want to send, len is the number of bytes you want to send, and flags allows you to specify more information about how the data is to be sent. Set flags to zero if you want it to be normal data. Here are some of the commonly used flags, but check your local send() man pages for more details:
Returns the number of bytes actually sent, or -1 on error (and errno will be set accordingly). Note that the number of bytes actually sent might be less than the number you asked it to send! See the section on handling partial send()s for a helper function to get around this.
Also, if the socket has been closed by either side, the process calling send() will get the signal SIGPIPE. (Unless send() was called with the MSG_NOSIGNAL flag.)
recv(), recvfrom()

Stop further sends and receives on a socket
Thats it! Ive had it! No more send()s are allowed on this socket, but I still want to recv() data on it! Or vice-versa! How can I do this?
When you close() a socket descriptor, it closes both sides of the socket for reading and writing, and frees the socket descriptor. If you just want to close one side or the other, you can use this shutdown() call.
As for parameters, s is obviously the socket you want to perform this action on, and what action that is can be specified with the how parameter. how can be SHUT_RD to prevent further recv()s, SHUT_WR to prohibit further send()s, or SHUT_RDWR to do both.
Note that shutdown() doesnt free up the socket descriptor, so you still have to eventually close() the socket even if it has been fully shut down.
This is a rarely used system call.
Returns zero on success, or -1 on error (and errno will be set accordingly).
close()

Allocate a socket descriptor
Returns a new socket descriptor that you can use to do sockety things with. This is generally the first call in the whopping process of writing a socket program, and you can use the result for subsequent calls to listen(), bind(), accept(), or a variety of other functions.
In usual usage, you get the values for these parameters from a call to getaddrinfo(), as shown in the example below. But you can fill them in by hand if you really want to.
The new socket descriptor to be used in subsequent calls, or -1 on error (and errno will be set accordingly).
accept(), bind(), getaddrinfo(), listen()
 
Structures for handling internet addresses
These are the basic structures for all syscalls and functions that deal with internet addresses. Often youll use getaddrinfo() to fill these structures out, and then will read them when you have to.
In memory, the struct sockaddr_in and struct sockaddr_in6 share the same beginning structure as struct sockaddr, and you can freely cast the pointer of one type to the other without any harm, except the possible end of the universe.
Just kidding on that end-of-the-universe thingif the universe does end when you cast a struct sockaddr_in* to a struct sockaddr*, I promise you its pure coincidence and you shouldnt even worry about it.
So, with that in mind, remember that whenever a function says it takes a struct sockaddr* you can cast your struct sockaddr_in*, struct sockaddr_in6*, or struct sockaddr_storage* to that type with ease and safety.
struct sockaddr_in is the structure used with IPv4 addresses (e.g. 192.0.2.10). It holds an address family (AF_INET), a port in sin_port, and an IPv4 address in sin_addr.
Theres also this sin_zero field in struct sockaddr_in which some people claim must be set to zero. Other people dont claim anything about it (the Linux documentation doesnt even mention it at all), and setting it to zero doesnt seem to be actually necessary. So, if you feel like it, set it to zero using memset().
Now, that struct in_addr is a weird beast on different systems. Sometimes its a crazy union with all kinds of #defines and other nonsense. But what you should do is only use the s_addr field in this structure, because many systems only implement that one.
struct sockaddr_in6 and struct in6_addr are very similar, except theyre used for IPv6.
struct sockaddr_storage is a struct you can pass to accept() or recvfrom() when youre trying to write IP version-agnostic code and you dont know if the new address is going to be IPv4 or IPv6. The struct sockaddr_storage structure is large enough to hold both types, unlike the original small struct sockaddr.
accept(), bind(), connect(), inet_aton(), inet_ntoa()
Youve come this far, and now youre screaming for more! Where else can you go to learn more about all this stuff?

For old-school actual hold-it-in-your-hand pulp paper books, try some of the following excellent books. These redirect to affiliate links with a popular bookseller, giving me nice kickbacks. If youre merely feeling generous, you can paypal a donation to beej@beej.us. :-)
Unix Network Programming, volumes 1-2 by W. Richard Stevens. Published by Addison-Wesley Professional and Prentice Hall. ISBNs for volumes 1-2: 978-013141155549, 978-013081081650.
Internetworking with TCP/IP, volume I by Douglas E. Comer. Published by Pearson. ISBN 978-013608530051.
TCP/IP Illustrated, volumes 1-3 by W. Richard Stevens and Gary R. Wright. Published by Addison Wesley. ISBNs for volumes 1, 2, and 3 (and a 3-volume set): 978-020163346752, 978-020163354253, 978-020163495254, (978-020177631755).
TCP/IP Network Administration by Craig Hunt. Published by OReilly & Associates, Inc. ISBN 978-059600297856.
Advanced Programming in the UNIX Environment by W. Richard Stevens. Published by Addison Wesley. ISBN 978-032163773457.


On the web:
BSD Sockets: A Quick And Dirty Primer58 (Unix system programming info, too!)
The Unix Socket FAQ59
TCP/IP FAQ60
The Winsock FAQ61
And here are some relevant Wikipedia pages:
Berkeley Sockets62
Internet Protocol (IP)63
Transmission Control Protocol (TCP)64
User Datagram Protocol (UDP)65
Client-Server66
Serialization67 (packing and unpacking data)

 
RFCs68the real dirt! These are documents that describe assigned numbers, programming APIs, and protocols that are used on the Internet. Ive included links to a few of them here for your enjoyment, so grab a bucket of popcorn and put on your thinking cap:
RFC 169 The First RFC; this gives you an idea of what the Internet was like just as it was coming to life, and an insight into how it was being designed from the ground up. (This RFC is completely obsolete, obviously!)
 RFC 76870 The User Datagram Protocol (UDP)
 RFC 79171 The Internet Protocol (IP)
 RFC 79372 The Transmission Control Protocol (TCP)
 RFC 85473 The Telnet Protocol
 RFC 95974 File Transfer Protocol (FTP)
 RFC 135075 The Trivial File Transfer Protocol (TFTP)
 RFC 145976 Internet Relay Chat Protocol (IRC)
RFC 191877 Address Allocation for Private Internets
 RFC 213178 Dynamic Host Configuration Protocol (DHCP)
 RFC 261679 Hypertext Transfer Protocol (HTTP)
 RFC 282180 Simple Mail Transfer Protocol (SMTP)
RFC 333081 Special-Use IPv4 Addresses
RFC 349382 Basic Socket Interface Extensions for IPv6
RFC 354283 Advanced Sockets Application Program Interface (API) for IPv6
RFC 384984 IPv6 Address Prefix Reserved for Documentation
 RFC 392085 Extensible Messaging and Presence Protocol (XMPP)
 RFC 397786 Network News Transfer Protocol (NNTP)
RFC 419387 Unique Local IPv6 Unicast Addresses
 RFC 450688 External Data Representation Standard (XDR)
The IETF has a nice online tool for searching and browsing RFCs89.
 
https://www.linux.com/
https://bsd.org/
https://learn.microsoft.com/en-us/windows/wsl/
https://cygwin.com/
https://www.tallyhawk.net/WinsockExamples/
http://www.catb.org/~esr/faqs/smart-questions.html
https://beej.us/guide/bgnet/source/examples/telnot.c
https://tools.ietf.org/html/rfc854
https://tools.ietf.org/html/rfc793
https://tools.ietf.org/html/rfc791
https://tools.ietf.org/html/rfc768
https://tools.ietf.org/html/rfc791
https://en.wikipedia.org/wiki/Vint_Cerf
https://en.wikipedia.org/wiki/ELIZA
https://www.iana.org/assignments/port-numbers
https://en.wikipedia.org/wiki/Doom_(1993_video_game)
https://en.wikipedia.org/wiki/Wilford_Brimley
https://tools.ietf.org/html/rfc1918
https://tools.ietf.org/html/rfc4193
https://www.iana.org/assignments/port-numbers
https://beej.us/guide/bgnet/source/examples/showip.c
https://tools.ietf.org/html/rfc1413
https://beej.us/guide/bgnet/source/examples/server.c
https://beej.us/guide/bgnet/source/examples/client.c
https://beej.us/guide/bgnet/source/examples/listener.c
https://beej.us/guide/bgnet/source/examples/talker.c
https://libevent.org/
https://beej.us/guide/bgnet/source/examples/poll.c
https://beej.us/guide/bgnet/source/examples/pollserver.c
https://libevent.org/
https://beej.us/guide/bgnet/source/examples/select.c
https://beej.us/guide/bgnet/source/examples/selectserver.c
https://en.wikipedia.org/wiki/Internet_Relay_Chat
https://beej.us/guide/bgnet/source/examples/pack.c
https://en.wikipedia.org/wiki/IEEE_754
https://beej.us/guide/bgnet/source/examples/ieee754.c
https://beej.us/guide/url/tpop
https://github.com/protobuf-c/protobuf-c
https://beej.us/guide/bgnet/source/examples/pack2.c
https://beej.us/guide/bgnet/source/examples/pack2.c
https://tools.ietf.org/html/rfc4506
https://beej.us/guide/bgnet/source/examples/broadcaster.c
http://www.unpbook.com/src.html
http://www.unpbook.com/src.html
https://www.openssl.org/
https://stackoverflow.com/questions/21323023/
https://www.iana.org/assignments/port-numbers
https://www.iana.org/assignments/port-numbers
https://beej.us/guide/url/unixnet1
https://beej.us/guide/url/unixnet2
https://beej.us/guide/url/intertcp1
https://beej.us/guide/url/tcpi1
https://beej.us/guide/url/tcpi2
https://beej.us/guide/url/tcpi3
https://beej.us/guide/url/tcpi123
https://beej.us/guide/url/tcpna
https://beej.us/guide/url/advunix
https://cis.temple.edu/~giorgio/old/cis307s96/readings/docs/sockets.html
https://developerweb.net/?f=70
http://www.faqs.org/faqs/internet/tcp-ip/tcp-ip-faq/part1/
https://tangentsoft.net/wskfaq/
https://en.wikipedia.org/wiki/Berkeley_sockets
https://en.wikipedia.org/wiki/Internet_Protocol
https://en.wikipedia.org/wiki/Transmission_Control_Protocol
https://en.wikipedia.org/wiki/User_Datagram_Protocol
https://en.wikipedia.org/wiki/Client-server
https://en.wikipedia.org/wiki/Serialization
https://www.rfc-editor.org/
https://tools.ietf.org/html/rfc1
https://tools.ietf.org/html/rfc768
https://tools.ietf.org/html/rfc791
https://tools.ietf.org/html/rfc793
https://tools.ietf.org/html/rfc854
https://tools.ietf.org/html/rfc959
https://tools.ietf.org/html/rfc1350
https://tools.ietf.org/html/rfc1459
https://tools.ietf.org/html/rfc1918
https://tools.ietf.org/html/rfc2131
https://tools.ietf.org/html/rfc2616
https://tools.ietf.org/html/rfc2821
https://tools.ietf.org/html/rfc3330
https://tools.ietf.org/html/rfc3493
https://tools.ietf.org/html/rfc3542
https://tools.ietf.org/html/rfc3849
https://tools.ietf.org/html/rfc3920
https://tools.ietf.org/html/rfc3977
https://tools.ietf.org/html/rfc4193
https://tools.ietf.org/html/rfc4506
https://tools.ietf.org/rfc/
